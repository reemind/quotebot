[{"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\index.tsx":"1","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\userpanel\\Panel.tsx":"2","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\userpanel\\Queries.tsx":"3","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Post.tsx":"4","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\comps\\desktop\\UserTable.tsx":"5","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\admin\\GroupsTable.tsx":"6","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\User.tsx":"7","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\comps\\mobile\\UserTable.tsx":"8","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Panel.tsx":"9","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Tasks.tsx":"10","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\generated\\graphql.ts":"11","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\generated\\queries.ts":"12","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\comps\\DataTags.tsx":"13","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\createTask.tsx":"14","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\MultipleActionsUsers.tsx":"15","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\generated\\mutations.ts":"16","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\Home.tsx":"17","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Dash.tsx":"18","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Quote.js":"19","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Reports.tsx":"20","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\App.tsx":"21","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\GroupSettings.tsx":"22","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\serviceWorkerRegistration.ts":"23","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Report.tsx":"24","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Users.tsx":"25","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\account\\settings.tsx":"26","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\Login.tsx":"27","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Points.tsx":"28","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\QrReader.tsx":"29","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\Auth.tsx":"30","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Point.tsx":"31","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\Grouplist.tsx":"32","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\PostsTable.tsx":"33","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\comps\\GetReportButton.tsx":"34","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Help.tsx":"35"},{"size":1993,"mtime":1616945226533,"results":"36","hashOfConfig":"37"},{"size":2100,"mtime":1616945226531,"results":"38","hashOfConfig":"37"},{"size":2239,"mtime":1616945226531,"results":"39","hashOfConfig":"37"},{"size":9792,"mtime":1616945226526,"results":"40","hashOfConfig":"37"},{"size":2504,"mtime":1616945226522,"results":"41","hashOfConfig":"37"},{"size":4341,"mtime":1616945226530,"results":"42","hashOfConfig":"37"},{"size":9894,"mtime":1616945226529,"results":"43","hashOfConfig":"37"},{"size":1259,"mtime":1616945226522,"results":"44","hashOfConfig":"37"},{"size":9607,"mtime":1617630286341,"results":"45","hashOfConfig":"37"},{"size":2539,"mtime":1617536796136,"results":"46","hashOfConfig":"37"},{"size":20680,"mtime":1617618187085,"results":"47","hashOfConfig":"37"},{"size":5808,"mtime":1617619763891,"results":"48","hashOfConfig":"37"},{"size":1745,"mtime":1617046628463,"results":"49","hashOfConfig":"37"},{"size":10166,"mtime":1617057133582,"results":"50","hashOfConfig":"37"},{"size":8633,"mtime":1617031252739,"results":"51","hashOfConfig":"37"},{"size":2653,"mtime":1617619264383,"results":"52","hashOfConfig":"37"},{"size":1377,"mtime":1616945226520,"results":"53","hashOfConfig":"37"},{"size":4376,"mtime":1617538191260,"results":"54","hashOfConfig":"37"},{"size":5236,"mtime":1616945226527,"results":"55","hashOfConfig":"37"},{"size":1963,"mtime":1617106551822,"results":"56","hashOfConfig":"37"},{"size":3828,"mtime":1616945226517,"results":"57","hashOfConfig":"37"},{"size":6717,"mtime":1616945226529,"results":"58","hashOfConfig":"37"},{"size":5396,"mtime":1616945226534,"results":"59","hashOfConfig":"37"},{"size":7438,"mtime":1617624868823,"results":"60","hashOfConfig":"37"},{"size":2486,"mtime":1616945226530,"results":"61","hashOfConfig":"37"},{"size":1383,"mtime":1617542325270,"results":"62","hashOfConfig":"37"},{"size":1198,"mtime":1616945226520,"results":"63","hashOfConfig":"37"},{"size":4158,"mtime":1617617750991,"results":"64","hashOfConfig":"37"},{"size":4487,"mtime":1616945226521,"results":"65","hashOfConfig":"37"},{"size":2979,"mtime":1616945226519,"results":"66","hashOfConfig":"37"},{"size":5047,"mtime":1617625508675,"results":"67","hashOfConfig":"37"},{"size":905,"mtime":1616945226520,"results":"68","hashOfConfig":"37"},{"size":1828,"mtime":1616945226527,"results":"69","hashOfConfig":"37"},{"size":1482,"mtime":1617628663891,"results":"70","hashOfConfig":"37"},{"size":1451,"mtime":1617630838493,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"3qf7ly",{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"77","usedDeprecatedRules":"74"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"82","usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"91","usedDeprecatedRules":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"100","usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":4,"source":"110","usedDeprecatedRules":"92"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"117","usedDeprecatedRules":"92"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"122","usedDeprecatedRules":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"126","usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":2,"source":"138","usedDeprecatedRules":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"74"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"145","usedDeprecatedRules":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"132"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"154","usedDeprecatedRules":"139"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":2,"source":"159","usedDeprecatedRules":"92"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\index.tsx",[],["168","169"],"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\userpanel\\Panel.tsx",["170"],"﻿import React, { FC } from 'react';\r\nimport { Layout, Menu } from 'antd';\r\nimport { Switch, Redirect, Route, useHistory } from 'react-router-dom';\r\nimport Queries from './Queries';\r\n\r\nconst { Header, Content, Footer } = Layout;\r\n\r\ntype ItemType = {\r\n    path: string,\r\n    key: string,\r\n}\r\n\r\nconst ContentItems: ItemType[] = [\r\n    {\r\n        path: \"/user/queries\",\r\n        key: \"queries\"\r\n    },\r\n    {\r\n        path: \"/user/reports\",\r\n        key: \"reports\"\r\n    },\r\n    {\r\n        path: \"/user/verified\",\r\n        key: \"verified\"\r\n    },\r\n]\r\n\r\nconst UserPanel: FC = (props) => {\r\n\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <Layout style={{ minHeight: \"100vh\" }}>\r\n            <Header>\r\n                \r\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']} onClick={({ key }) => {\r\n                    history.push(ContentItems.find(t => t.key === key)?.path ?? \"\")\r\n                }}>\r\n                    <Menu.Item key=\"queries\">In query</Menu.Item>\r\n                    <Menu.Item key=\"reports\">Meetups</Menu.Item>\r\n                    <Menu.Item key=\"verified\">Completed</Menu.Item>\r\n                </Menu>\r\n            </Header>\r\n            <Layout style={{ padding: '36px' }} >\r\n                <Content\r\n                    className=\"site-layout-background\"\r\n                    style={{\r\n                        padding: 24,\r\n                        margin: 0,\r\n                        minHeight: 280,\r\n                    }}>\r\n                    <Switch>\r\n                        <Redirect exact from=\"/user/\" to=\"/user/queries\" />\r\n\r\n                        <Route path=\"/user/queries\" component={() => <Queries/>} />\r\n                        <Route path=\"/user/reports\" component={() => <Queries />} />\r\n                        <Route path=\"/user/verified\" component={() => <Queries />} />\r\n                    </Switch>\r\n                </Content>\r\n                </Layout>\r\n            <Footer style={{ textAlign: 'center' }}>help@nexagon.ru    QuoteSystem 2020 </Footer>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default UserPanel","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\userpanel\\Queries.tsx",["171","172","173","174"],"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Post.tsx",["175","176","177","178"],"import React, { ReactText, useState } from \"react\";\r\nimport { Redirect, Link, RouteComponentProps, withRouter, useHistory } from \"react-router-dom\";\r\nimport { LoadingOutlined } from \"@ant-design/icons\";\r\nimport { Button, Col, Drawer, Input, InputNumber, message, PageHeader, Popconfirm, Row, Space, Table, Tag } from \"antd\";\r\nimport { useQuery, gql, useMutation, useApolloClient } from \"@apollo/client\";\r\nimport { MutationType, MutationTypeDeletePostArgs, MutationTypeEditPostInfoArgs, MutationTypeNotifyUsersArgs, QueryType, QueryTypeUserArgs } from '../../generated/graphql'\r\nimport './User.sass'\r\nimport { SwitchQuote } from \"./Quote\";\r\nimport { OutTag, RepostTag } from \"../comps/DataTags\";\r\nimport { GET_POST } from \"../../generated/queries\";\r\nimport { EDIT_POST_INFO, NOTIFY_USERS, DELETE_POST } from \"../../generated/mutations\";\r\n\r\n\r\nconst successMes = () => {\r\n    message.success('Success');\r\n};\r\n\r\nconst successMesCount = (count) => {\r\n    message.success(`Success. ${count} user(s) added`);\r\n};\r\n\r\nconst errorMes = () => {\r\n    message.error('Error');\r\n};\r\n\r\nconst isEmpty = function (str) {\r\n    return (str.length === 0 || !str.trim());\r\n};\r\n\r\ninterface RouterProps { // type for `match.params`\r\n    id: string; // must be type `string` since value comes from the URL\r\n}\r\n\r\ninterface PostProps extends RouteComponentProps<RouterProps> {\r\n    // any other props (leave empty if none)\r\n}\r\n\r\ninterface PostState {\r\n    max: number,\r\n    drawer: boolean,\r\n    name: string,\r\n    selected: ReactText[]\r\n}\r\n\r\nexport const Post: React.FC<PostProps> = ({ match }) => {\r\n    const id: number = parseInt(match.params.id)\r\n\r\n    const history = useHistory()\r\n    const [state, setState] = useState<PostState>({\r\n        max: 0,\r\n        drawer: false,\r\n        name: \"\",\r\n        selected: []\r\n    })\r\n\r\n    const client = useApolloClient()\r\n    const { data, loading, refetch } = useQuery<QueryType, QueryTypeUserArgs>(GET_POST, {\r\n        variables: {\r\n            id\r\n        }\r\n    })\r\n\r\n    const [editInfo, mutData] = useMutation<MutationType, MutationTypeEditPostInfoArgs>(EDIT_POST_INFO, {\r\n        onCompleted: (dat) => {\r\n            if (dat.editPostInfo)\r\n                successMes()\r\n            else\r\n                errorMes()\r\n            refetch()\r\n        },\r\n        onError: () => errorMes()\r\n    })\r\n\r\n    const [deletePost, deleteData] = useMutation<MutationType, MutationTypeDeletePostArgs>(DELETE_POST, {\r\n        onCompleted: (dat) => {\r\n            if (dat.deletePost) {\r\n                successMes()\r\n                history.goBack()\r\n            }\r\n            else\r\n                errorMes()\r\n            refetch()\r\n        },\r\n        onError: () => errorMes()\r\n    })\r\n\r\n    const [notify] = useMutation<MutationType, MutationTypeNotifyUsersArgs>(NOTIFY_USERS, {\r\n        onCompleted: (value) => {\r\n            if (value?.notifyUsers)\r\n                successMesCount(value?.notifyUsers)\r\n            else\r\n                errorMes()\r\n            refetch()\r\n        },\r\n        onError: () => errorMes(),\r\n        refetchQueries: [\"GetReports\"]\r\n    })\r\n\r\n    if (!id || (data && !data?.post))\r\n        return <Redirect to=\"/panel/posts\" />\r\n\r\n    if (!loading && data)\r\n        return <React.Fragment>\r\n            <PageHeader\r\n                ghost={false}\r\n                title={<Input key=\"name\" style={{ fontSize: 20 }} onChange={(e) => { if (e.target.value !== \"\") setState({ ...state, name: e.target.value }) }} bordered={false} defaultValue={data.post?.text ?? \"\"} />}\r\n                subTitle={`${data.qoutesByPost?.totalCount} of ${data.post?.max}`}\r\n                onBack={() => window.history.back()}\r\n                extra={[\r\n                    data?.post?.isRepost && <RepostTag />,\r\n                    ((data.qoutesByPost?.totalCount ?? 1) >= (data.post?.max ?? 0)) && <Tag key=\"tag\" color=\"blue\">Full</Tag>,\r\n                    <Button type=\"primary\" disabled={(state.max === 0 || data?.post?.max === state.max) && (isEmpty(state.name) || state.name === data?.post?.text)} icon={mutData.loading && <LoadingOutlined />} key=\"submit\" onClick={() => {\r\n                        editInfo({\r\n                            variables: {\r\n                                id,\r\n                                newMax: state?.max ?? 0,\r\n                                newName: state.name\r\n                            }\r\n                        })\r\n                    }}>Sibmit Changes</Button>,\r\n                    <Button disabled={data?.post?.isRepost} key=\"notify\" onClick={() => {\r\n                        setState({ ...state, drawer: true, selected: [] })\r\n                    }}>\r\n                        Notify\r\n                    </Button>,\r\n                    <Popconfirm key=\"delete\" title=\"Do you sure?\" placement=\"bottomRight\" onConfirm={() => {\r\n                        deletePost({ variables: { id } })\r\n                    }}>\r\n                        <Button danger>\r\n                            Close\r\n                        </Button>\r\n                    </Popconfirm>\r\n                ]}\r\n            >\r\n                <Space align=\"baseline\" size=\"large\">\r\n                    <p>Max: </p>\r\n                    <InputNumber defaultValue={data.post?.max} min={0} max={200} step={1} onChange={(value: any) => setState({ ...state, max: parseInt(value) })} />\r\n                </Space>\r\n            </PageHeader>\r\n            <Table dataSource={data?.qoutesByPost?.nodes ?? new Array()} //onChange={(pagination, filters, sorter) => {\r\n                //setState({...state, sorter, pagination})}} \r\n                rowKey=\"id\"\r\n                loading={loading}\r\n                pagination={{ showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} users` }}>\r\n                <Table.Column key=\"name\" title=\"Name\" dataIndex=\"user\" render={(value) => <Link to={\"/panel/user/\" + value.id}>{value.name}</Link>} sorter={(a: any, b: any) => a.post.text.localeCompare(b.post.text)} />\r\n                <Table.Column key=\"room\" title=\"Room\" dataIndex=\"user\" render={(value) => value.room} sorter={(a: any, b: any) => a.post.max - b.post.max} />\r\n                <Table.Column key=\"state\" dataIndex=\"isOut\" render={value =>\r\n                    <OutTag isOut={value} />\r\n                } />\r\n\r\n\r\n                <Table.Column\r\n                    title=\"Action\"\r\n                    key=\"action\"\r\n                    render={(record) => (\r\n                        <Space size=\"middle\">\r\n                            <Button onClick={() => SwitchQuote(client, record.id, () => refetch())}>{record.isOut ? \"MakeIn\" : \"MakeOut\"}</Button>\r\n                        </Space>\r\n                    )}\r\n                />\r\n\r\n            </Table>\r\n            <Drawer\r\n                title=\"Select Users\"\r\n                width={720}\r\n                onClose={() => setState({ ...state, drawer: false })}\r\n                visible={state.drawer}\r\n                bodyStyle={{ paddingBottom: 80 }}\r\n                footer={\r\n                    <div\r\n                        style={{\r\n                            textAlign: 'right',\r\n                        }}\r\n                    >\r\n                        {`Total: ${state.selected.length}   `}\r\n                        <Button onClick={() => setState({ ...state, drawer: false })} style={{ marginRight: 8 }}>\r\n                            Cancel\r\n              </Button>\r\n                        <Button onClick={() => {\r\n                            if (state.selected.length === 0)\r\n                                message.warning(\"Select Users\")\r\n                            else {\r\n                                setState({ ...state, drawer: false })\r\n                                notify({ variables: { postId: data?.post?.id ?? 0, quotesId: state.selected.map(t => parseInt(t.toString())) } })\r\n                            }\r\n\r\n                        }} type=\"primary\">\r\n                            Notify\r\n              </Button>\r\n                    </div>\r\n                }\r\n            >\r\n                <Table dataSource={data?.qoutesByPost?.nodes?.filter(t => !t?.isOut) ?? new Array()} rowKey={record => record.id}\r\n                    loading={loading}\r\n                    pagination={false}\r\n                    rowSelection={{\r\n                        type: \"checkbox\",\r\n                        selectedRowKeys: state.selected,\r\n                        onChange: (sel) => setState({ ...state, selected: sel }),\r\n                        selections: [{\r\n                            key: 'auto',\r\n                            text: 'Auto Select',\r\n                            onSelect: (changableRowKeys) => {\r\n                                let rows = data?.qoutesByPost?.nodes?.filter(t => !t?.isOut)\r\n                                    .map(t => (t?.id.toString() ?? \"\")).slice(0, data?.post?.max ?? 1)\r\n                                setState({\r\n                                    ...state, selected: changableRowKeys.filter(key => rows?.find(t => t === key.toString()))\r\n                                })\r\n                            },\r\n                        },]\r\n                    }}>\r\n                    <Table.Column key=\"name\" title=\"Name\" dataIndex=\"user\" render={(value) => <Link to={\"/panel/user/\" + value.id}>{value.name}</Link>} sorter={(a: any, b: any) => a.post.text.localeCompare(b.post.text)} />\r\n                    <Table.Column key=\"room\" title=\"Room\" dataIndex=\"user\" render={(value) => value.room} sorter={(a: any, b: any) => a.post.max - b.post.max} />\r\n                </Table>\r\n            </Drawer>\r\n        </React.Fragment>\r\n\r\n\r\n\r\n    return <Row style={{ minHeight: \"100%\" }} align=\"middle\" justify=\"center\">\r\n        <Col><LoadingOutlined style={{ fontSize: 64 }} /></Col>\r\n    </Row>\r\n}\r\n\r\nexport default withRouter(Post)",["179","180"],"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\comps\\desktop\\UserTable.tsx",["181"],"import { Space, Table } from \"antd\";\r\nimport React, { FC } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { QueryType } from \"../../../generated/graphql\";\r\nimport { RoleTag } from \"../DataTags\";\r\n\r\n\r\ntype UsersTableProps = {\r\n    data: QueryType | undefined, \r\n    loading: boolean, \r\n    all?: boolean, \r\n    search?: string, \r\n    role: number\r\n}\r\n\r\nconst UsersTable : FC<UsersTableProps> = ({data, loading, role, all, search}) => (\r\n    <Table dataSource={data?.users?.nodes ?? new Array()} //onChange={(pagination, filters, sorter) => {\r\n                //setState({...state, sorter, pagination})}} \r\n                rowKey=\"id\"\r\n                loading={loading}\r\n        pagination={{ showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} users` }}>\r\n        <Table.Column key=\"name\" title=\"Name\" filterMultiple filteredValue={[search ?? \"\"]} onFilter={(value, record) =>\r\n                    record.name.indexOf(value) !== -1 ||\r\n                    record.room.toString().startsWith(value) ||\r\n                    (all && record.buildNumber.startsWith(value))\r\n                } dataIndex=\"name\" sorter={(a: any, b: any) => a.name.localeCompare(b.name)} />\r\n                <Table.Column key=\"room\" title=\"Room\" dataIndex=\"room\" sorter={(a: any, b: any) => a.room - b.room} />\r\n                {all && <Table.Column key=\"buildNumber\" title=\"House\" dataIndex=\"buildNumber\" sorter={(a: any, b: any) => a.name.localeCompare(b.name)} />}\r\n                {all && <Table.Column key=\"group\" title=\"Group\" responsive={['md']} dataIndex=\"group\" sorter={(a: any, b: any) => a.name.localeCompare(b.name)} render={(value) => <Link to={`/panel/admin/group/${value.id}`}>{value.name}</Link>} />}\r\n                {!all && <Table.Column key=\"role\" title=\"Role\" filteredValue={(role!==-1)?[role]:null} dataIndex=\"role\" filterMultiple render={\r\n                    role => (<RoleTag role={role} />)\r\n                } onFilter={\r\n                    (value, record: any) => record.role === value\r\n                } />}\r\n                <Table.Column\r\n                    width={36}\r\n                    title=\"Action\"\r\n                    key=\"action\"\r\n                    render={(record) => (\r\n                        <Space size=\"middle\">\r\n                            <Link to={(all ? \"/panel/admin/user/\" : \"/panel/user/\") + record.id}>View</Link>\r\n                        </Space>\r\n                    )}\r\n                />\r\n            </Table>\r\n)\r\n\r\nexport default UsersTable","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\admin\\GroupsTable.tsx",["182","183","184","185","186","187"],"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\User.tsx",["188","189","190","191"],"import React, { useState } from \"react\";\r\nimport { Redirect, Link, RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { LoadingOutlined } from \"@ant-design/icons\";\r\nimport { Button, Col, Input, message, PageHeader, Radio, Row, Space, Table, Modal } from \"antd\";\r\nimport { useQuery, gql, useMutation, useApolloClient, useLazyQuery } from \"@apollo/client\";\r\nimport { QueryType, QueryTypeUserArgs, MutationTypeEditUserInfoArgs, MutationType, QueryTypeUserRolesArgs, QueryTypeGroupsArgs, MutationTypeRemoveRoleArgs } from '../../generated/graphql'\r\nimport './User.sass'\r\nimport { SwitchQuote } from \"./Quote\";\r\nimport { OutTag, RoleTag } from \"../comps/DataTags\";\r\nimport { GET_GROUPS, GET_ROLES, GET_USER } from \"../../generated/queries\";\r\nimport { DELETE_USER_ROLE, EDIT_USER_TYPE } from \"../../generated/mutations\";\r\n\r\n\r\n\r\nconst successMes = () => {\r\n    message.success('Success');\r\n};\r\n\r\nconst errorMes = () => {\r\n    message.error('Error');\r\n};\r\n\r\ninterface RouterProps { // type for `match.params`\r\n    id: string; // must be type `string` since value comes from the URL\r\n}\r\n\r\ninterface UserProps extends RouteComponentProps<RouterProps> {\r\n    all?: boolean,\r\n    profileRole: number\r\n}\r\n\r\ninterface UserState {\r\n    type: number,\r\n    msg: boolean,\r\n    maker: any,\r\n    name: string,\r\n    groupId: number,\r\n    modal2Visible: boolean\r\n}\r\n\r\nexport const User: React.FC<UserProps> = ({ match, all, profileRole }) => {\r\n    const id: number = parseInt(match.params.id)\r\n    const [state, setState] = useState<UserState>({\r\n        type: -1,\r\n        msg: false,\r\n        maker: null,\r\n        name: \"\",\r\n        groupId: 0,\r\n        modal2Visible: false\r\n    })\r\n\r\n    const client = useApolloClient()\r\n    const { data, loading, refetch } = useQuery<QueryType, QueryTypeUserArgs>(GET_USER, {\r\n        variables: {\r\n            id: id,\r\n            forAdmin: all\r\n        }\r\n    })\r\n\r\n    const [loadGroups, groupsData] = useLazyQuery<QueryType, QueryTypeGroupsArgs>(GET_GROUPS)\r\n\r\n    const [loadRoles, rolesData] = useLazyQuery<QueryType, QueryTypeUserRolesArgs>(GET_ROLES, {\r\n        variables: {\r\n            id\r\n        }\r\n    })\r\n\r\n    if (all && !rolesData.called)\r\n        loadRoles()\r\n\r\n    const [editInfo, mutData] = useMutation<MutationType, MutationTypeEditUserInfoArgs>(EDIT_USER_TYPE, {\r\n        onCompleted: (dat) => {\r\n            if (dat.editUserInfo)\r\n                successMes()\r\n            else\r\n                errorMes()\r\n            refetch()\r\n            if (all)\r\n                rolesData?.refetch?.()\r\n        },\r\n        onError: () => errorMes(),\r\n        refetchQueries: [\"GetUsers\"]\r\n    })\r\n\r\n    const [removeRole] = useMutation<MutationType, MutationTypeRemoveRoleArgs>(DELETE_USER_ROLE, {\r\n        onCompleted: (dat) => {\r\n            if (dat.removeRole)\r\n                successMes()\r\n            else\r\n                errorMes()\r\n            rolesData?.refetch?.()\r\n        },\r\n        onError: () => errorMes()\r\n    })\r\n\r\n    if (!id || (data && !data?.user))\r\n        return <Redirect to={(all ? \"/panel/admin/\" : \"/panel/\") + \"users\"} />\r\n\r\n    if (!loading && data)\r\n        return <React.Fragment>\r\n            <PageHeader\r\n                ghost={false}\r\n                title={<Input style={{ fontSize: 20 }} onChange={(e) => { if (e.target.value !== \"\") setState({ ...state, name: e.target.value }) }} bordered={false} defaultValue={data.user?.name ?? \"\"} />}\r\n                onBack={() => window.history.back()}\r\n                avatar={{ src: \"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\", shape: \"circle\" }}\r\n                subTitle={`Комната: ${data.user?.room}`}\r\n                extra={[\r\n                    <a key=\"vkLink\" target=\"_blank\" rel=\"noopener noreferrer\" href={`https://vk.com/id${data.user?.vkId}`}>Vk Profile</a>,\r\n                    <Button type=\"primary\" icon={mutData.loading && <LoadingOutlined />} key=\"2\" disabled={(((state?.type ?? data.user?.role) === data.user?.role) && state.name === \"\") || mutData.loading} onClick={() => {\r\n                        editInfo({\r\n                            variables: {\r\n                                id,\r\n                                newType: state?.type ?? 0,\r\n                                newName: state.name,\r\n                                forAdmin: all\r\n                            }\r\n                        })\r\n                    }}>Sibmit Changes</Button>,\r\n                    <Button key=\"1\">\r\n                        Block\r\n            </Button>,\r\n                ]}\r\n            >\r\n                {!all ? <Radio.Group disabled={(data.user?.role ?? 0) >= profileRole} onChange={(e) => setState({ ...state, type: e.target.value })} defaultValue={data.user?.role} buttonStyle=\"solid\">\r\n                    <Radio.Button value={0}>User</Radio.Button>\r\n                    <Radio.Button value={1}>GroupModer</Radio.Button>\r\n                    <Radio.Button value={2}>GroupAdmin</Radio.Button>\r\n                </Radio.Group> :\r\n                    <Button onClick={() => {\r\n                        setState({ ...state, modal2Visible: true })\r\n                        loadGroups()\r\n                    }}>Set Role</Button>}\r\n            </PageHeader>\r\n            <Row style={{ width: \"100%\" }} gutter={10}>\r\n                <Col span={all?16:24}>\r\n                    <Table dataSource={data?.qoutesByUser?.nodes ?? new Array()} //onChange={(pagination, filters, sorter) => {\r\n                        //setState({...state, sorter, pagination})}} \r\n                        loading={loading}\r\n                        rowKey=\"id\"\r\n                        pagination={{ showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} users` }}>\r\n                        <Table.Column key=\"state\" dataIndex=\"isOut\" render={value =>\r\n                            <OutTag isOut={value}/>\r\n                        } />\r\n                        <Table.Column key=\"post\" title=\"Post\" dataIndex=\"post\" render={(value) => <Link to={\"/panel/post/\" + value.id}>{value.text}</Link>} sorter={(a: any, b: any) => a.post.text.localeCompare(b.post.text)} />\r\n                        <Table.Column key=\"max\" title=\"Max\" dataIndex=\"post\" render={(value) => value.max} sorter={(a: any, b: any) => a.post.max - b.post.max} />\r\n\r\n                        <Table.Column\r\n                            title=\"Action\"\r\n                            key=\"action\"\r\n                            render={(record) => (\r\n                                <Space size=\"middle\">\r\n                                    <Button onClick={() => SwitchQuote(client, record.id, () => refetch(), all)}>{record.isOut ? \"MakeIn\" : \"MakeOut\"}</Button>\r\n                                </Space>\r\n                            )}\r\n                        />\r\n\r\n                    </Table>\r\n                </Col>\r\n                {all && <Col span={8}>\r\n                    <Table rowKey=\"id\" loading={rolesData.loading} dataSource={rolesData.data?.userRoles ?? new Array()}>\r\n                        <Table.Column key=\"buildNumber\" title=\"House\" dataIndex=\"buildNumber\" sorter={(a: any, b: any) => a.text.localeCompare(b.text)} />\r\n                        <Table.Column key=\"role\" title=\"Role\" dataIndex=\"role\" render={(role) => <RoleTag role={role} />} />\r\n                        <Table.Column key=\"delete\" title=\"Action\" render={(record) => <Button onClick={() => removeRole({ variables: { id: record.id} })}>Delete</Button>} />\r\n                    </Table>\r\n                </Col>}\r\n            </Row>\r\n            \r\n\r\n            <Modal\r\n                title=\"Add to Post\"\r\n                style={{ top: 20 }}\r\n                visible={state.modal2Visible}\r\n                onOk={() => {\r\n                    if (state.groupId < 1)\r\n                        message.warning(\"Select Group\")\r\n                    else {\r\n                        setState({ ...state, modal2Visible: false })\r\n                        editInfo({\r\n                            variables: {\r\n                                groupId: state.groupId,\r\n                                newType: state.type,\r\n                                forAdmin: all,\r\n                                id\r\n                            }\r\n                        })\r\n                    }\r\n                }}\r\n                onCancel={() => setState({ ...state, modal2Visible: false })}\r\n            >\r\n                <Radio.Group onChange={(e) => setState({ ...state, type: e.target.value })} buttonStyle=\"solid\">\r\n                    <Radio.Button value={0}>User</Radio.Button>\r\n                    <Radio.Button value={1}>GroupModer</Radio.Button>\r\n                    <Radio.Button value={2}>GroupAdmin</Radio.Button>\r\n                    <Radio.Button value={3}>Moder</Radio.Button>\r\n                    <Radio.Button value={4}>Admin</Radio.Button>\r\n                </Radio.Group>\r\n                <Table rowKey=\"id\" loading={groupsData.loading} rowSelection={{\r\n                    type: \"radio\",\r\n                    onSelect: (sel) => {\r\n                        setState({ ...state, groupId: sel.id })\r\n                    }\r\n                }} dataSource={groupsData.data?.groups?.nodes ?? new Array()}>\r\n                    <Table.Column key=\"name\" title=\"Name\" dataIndex=\"name\" sorter={(a: any, b: any) => a.name.localeCompare(b.name)} />\r\n                    <Table.Column key=\"buildNumber\" title=\"House\" dataIndex=\"buildNumber\" sorter={(a: any, b: any) => a.buildNumber.localeCompare(b.buildNumber)} />\r\n                </Table>\r\n            </Modal>\r\n        </React.Fragment>\r\n\r\n    return <Row style={{ minHeight: \"100%\" }} align=\"middle\" justify=\"center\">\r\n        <Col><LoadingOutlined style={{ fontSize: 64 }} /></Col>\r\n    </Row>\r\n}\r\n\r\n//{ all && <Radio.Button value={3}>Moder</Radio.Button> }\r\n//{ all && <Radio.Button value={4}>Admin</Radio.Button> }\r\n\r\nexport default withRouter(User)",["192","193"],"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\comps\\mobile\\UserTable.tsx",["194","195","196"],"import { Space, List } from \"antd\";\r\nimport React, { FC } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { QueryType } from \"../../../generated/graphql\";\r\nimport { RoleTag } from \"../DataTags\";\r\n\r\n\r\ntype UsersTableProps = {\r\n    data: QueryType | undefined, \r\n    loading: boolean, \r\n    all?: boolean, \r\n    search?: string, \r\n    role: number\r\n}\r\n\r\nconst UsersTable : FC<UsersTableProps> = ({data, loading, role, all, search}) => (\r\n    <List dataSource={data?.users?.nodes?.filter(record => (record?.name?.indexOf(search ?? \"\") !== -1 ||\r\n        record?.room.toString().startsWith(search ?? \"\") ||\r\n        (all && record?.buildNumber?.startsWith(search ?? \"\"))) && (role === -1 || record?.role === role)) ?? new Array()}\r\n                rowKey=\"id\"\r\n                loading={loading}\r\n                pagination={{ simple: true }}\r\n                renderItem={(item)=><List.Item actions={[<Link to={(all ? \"/panel/admin/user/\" : \"/panel/user/\") + item.id}>View</Link>]}>\r\n                    <List.Item.Meta\r\n                    title={item?.name}\r\n                    description={all?`${item?.buildNumber}(${item?.room})`:item?.room}\r\n                    />\r\n                </List.Item>}>\r\n    </List>\r\n)\r\n\r\nexport default UsersTable","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Panel.tsx",[],"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Tasks.tsx",["197","198","199"],"﻿import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { PageHeader, Space, Table } from \"antd\";\r\nimport { useQuery, gql } from \"@apollo/client\";\r\nimport { QueryType, ScheludedTaskType } from '../../generated/graphql'\r\nimport { TaskTag } from \"../comps/DataTags\";\r\nimport { GET_TASKS } from '../../generated/queries';\r\nimport moment from \"moment\";\r\n\r\nfunction convertTaskType(task: ScheludedTaskType) {\r\n    switch (task.taskType) {\r\n        case 0:\r\n            return `Notify post with id=${JSON.parse(task.data ?? \"{}\").PostId}`\r\n        case 1:\r\n            return `Close report with id=${JSON.parse(task.data ?? \"{}\").ReportId}`\r\n        case 2:\r\n            return `Send messages ${JSON.parse(task.data ?? \"{}\").UserIds.length} users`\r\n    }\r\n}\r\n\r\nexport const Tasks: React.FC = () => {\r\n\r\n    const { data, loading } = useQuery<QueryType>(GET_TASKS)\r\n\r\n    return (\r\n        <PageHeader\r\n            ghost={true}\r\n            title=\"Tasks\"\r\n            //subTitle={`Всего человек: ${state.pagination.showTotal}`}\r\n            extra={[\r\n                <Link key=\"new\" to=\"/panel/task\">New</Link>\r\n            ]}>\r\n            <Table rowKey=\"id\" dataSource={data?.tasks?.nodes ?? new Array()}\r\n                loading={loading}\r\n                pagination={{ showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} posts` }}>\r\n                <Table.Column key=\"name\" title=\"Name\" dataIndex=\"name\" sorter={(a: any, b: any) => a.text.localeCompare(b.text)}\r\n                    render={(item, record) => (<p><TaskTag completed={record.completed} success={record.success} /> {convertTaskType(record)}</p>)} />\r\n                <Table.Column key=\"startTime\" title=\"Start time\" dataIndex=\"startTime\"\r\n                    render={(tm) => moment.utc(tm).local().format(\"DD.MM.YYYY HH:mm:ss\")} />\r\n                <Table.Column key=\"comment\" title=\"Comment\" dataIndex=\"comment\" />\r\n                <Table.Column key=\"creator\" title=\"Creator\" dataIndex=\"creator\" render={(item) => <Link to={\"/panel/user/\"+item.id}>{item.name}</Link>} />\r\n\r\n                <Table.Column\r\n                    width={42}\r\n                    title=\"Action\"\r\n                    key=\"action\"\r\n                    render={(record) => (\r\n                        <Space size=\"middle\">\r\n                            <Link to={\"/panel/task/\" + record.id}>View</Link>\r\n                        </Space>\r\n                    )}\r\n                />\r\n            </Table>\r\n        </PageHeader>)\r\n\r\n}\r\n\r\nexport default Tasks","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\generated\\graphql.ts",["200","201"],"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\generated\\queries.ts",["202"],"﻿import { gql } from \"@apollo/client\";\r\n\r\nexport const GET_PROFILE = gql`\r\nquery GetProfile\r\n{\r\n  profile{\r\n    id\r\n    name\r\n    role\r\n  }\r\n}\r\n`;\r\n\r\nexport const GET_GROUPS_AUTH = gql`\r\n    query authGroups($code: String!, $redirectUri: String!){\r\n        authGroups(code: $code, redirectUri: $redirectUri){\r\n        token\r\n        groups{\r\n            id\r\n            name\r\n            role\r\n        }\r\n    }\r\n}`;\r\n\r\nexport const GET_TOKEN = gql`\r\n    query GetToken($groupId: Long!){\r\n        token(groupId: $groupId)\r\n}`;\r\n\r\nexport const GET_USERS = gql`\r\nquery GetUsers($forAdmin: Boolean) {\r\n  users(forAdmin: $forAdmin) {\r\n    nodes {\r\n      id\r\n      name\r\n      role\r\n      room\r\n      buildNumber\r\n    }\r\n    totalCount\r\n  }\r\n}`;\r\n\r\nexport const GET_USERS_ALL = gql`\r\nquery GetUsers {\r\n  users(forAdmin : true) {\r\n    nodes {\r\n      id\r\n      name\r\n      room\r\n      buildNumber\r\n      group{\r\n        id\r\n        name\r\n      }\r\n    }\r\n    totalCount\r\n    pageInfo {\r\n      endCursor\r\n    }\r\n  }\r\n}`;\r\n\r\nexport const GET_USER = gql`\r\nquery GetUser($id: Int!, $forAdmin: Boolean) {\r\n    user(id: $id, forAdmin: $forAdmin) {\r\n        id\r\n        name\r\n        room\r\n        role\r\n        vkId\r\n    }\r\n    qoutesByUser(id: $id, forAdmin: $forAdmin) {\r\n        nodes {\r\n            id\r\n            isOut\r\n            post {\r\n                text,\r\n                max\r\n                id\r\n            }\r\n        }\r\n    } \r\n}`;\r\n\r\nexport const GET_GROUPS = gql`\r\nquery GetPosts{\r\n    groups {\r\n        nodes {\r\n            id\r\n            name\r\n            buildNumber\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\nexport const GET_ROLES = gql`\r\nquery GetRoles($id: Int!) {\r\n  userRoles(id: $id) {\r\n      id\r\n      buildNumber\r\n      role\r\n  }\r\n}\r\n`;\r\n\r\nexport const GET_GROUPS_DETAILED = gql`\r\nquery GetGroups{\r\n  groups {\r\n    nodes {\r\n      id\r\n      groupId\r\n      name\r\n      enabled\r\n      buildNumber\r\n    }\r\n  }\r\n}`;\r\n\r\nexport const GET_GROUP_INFO = gql`\r\nquery GetGroupInfo($id : Int, $forAdmin: Boolean, $newGroup: Boolean) {\r\n  groupInfo(id: $id, forAdmin: $forAdmin, newGroup: $newGroup) {\r\n    name\r\n    enabled\r\n    keyboard\r\n    groupId\r\n    key\r\n    secret\r\n    token\r\n    withFilter\r\n    filterPattern\r\n    buildNumber\r\n    withQrCode\r\n  }\r\n}\r\n`;\r\n\r\nexport const GET_POSTS_DETAILED = gql`\r\nquery GetPosts{\r\n    posts {\r\n        nodes {\r\n            text\r\n            id\r\n            max\r\n            deleted\r\n            isRepost\r\n        }\r\n    }\r\n}`;\r\n\r\nexport const GET_POSTS = gql`\r\nquery GetPosts{\r\n    posts {\r\n        nodes {\r\n            text\r\n            id\r\n            isRepost\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\nexport const GET_POST = gql`\r\nquery GetPost($id: Int!) {\r\n  post(id: $id) {\r\n    id\r\n    max\r\n    text\r\n    isRepost\r\n  }\r\n  qoutesByPost(id: $id) {\r\n    nodes {\r\n      id\r\n      isOut\r\n      user {\r\n        name\r\n        room\r\n        id\r\n      }\r\n    }\r\n    totalCount\r\n  }\r\n}\r\n`;\r\n\r\nexport const GET_DASHBOARD_INFO = gql`\r\nquery GetGroupInfo {\r\n  groupInfo {\r\n    name\r\n    enabled\r\n    groupId\r\n  }\r\n  stat{\r\n    statFloor{\r\n      floor\r\n      count\r\n      }\r\n    statQuotes{\r\n      date\r\n      count\r\n      }\r\n  }\r\n}\r\n`;\r\n\r\nexport const GET_DASHBOARD_INFO_ALL = gql`\r\nquery GetGroupsInfo($groupId: Int) {\r\n    groupInfo(id: $groupId) {\r\n        id\r\n        name\r\n        enabled\r\n        groupId\r\n      }\r\n      stat(forAdmin: true, groupId: $groupId){\r\n        statFloor{\r\n          floor\r\n          count\r\n          }\r\n        statQuotes{\r\n          date\r\n          count\r\n          }\r\n      }\r\n  groups {\r\n    nodes {\r\n      id\r\n      buildNumber\r\n    }\r\n  }\r\n}`;\r\n\r\nexport const GET_REPORTS = gql`\r\nquery GetReports{\r\n    reports {\r\n        nodes {\r\n            id\r\n            max\r\n            name\r\n            closed\r\n            fromPost {\r\n                id\r\n            }\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\nexport const GET_REPORT = gql`\r\nquery GetReport($id: Int!) {\r\n    report(id: $id) {\r\n        id\r\n        max\r\n        closed\r\n        name\r\n        fromPost {\r\n            id\r\n        }\r\n    }\r\n    reportItems(id: $id){\r\n        nodes{\r\n            id\r\n            verified\r\n            user{\r\n                name\r\n                id\r\n                room\r\n            }\r\n        }\r\n        totalCount\r\n    }\r\n}`;\r\n\r\nexport const GET_REPORT_CODE = gql`\r\nquery GetReportCode($id: Int!) {\r\n    reportCode(id: $id)\r\n}\r\n`;\r\n\r\nexport const GET_QUOTE_POINTS = gql`\r\nquery GetQuotePoints {\r\n  quotePoints {\r\n    nodes {\r\n      id\r\n      name\r\n      report{\r\n        id\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const GET_QUOTE_POINT_ITEMS = gql`\r\nquery GetQuotePointItems($reportId: Int!) {\r\nquotePoint(id: $reportId) {\r\n      id\r\n      name\r\n      report{\r\n        id\r\n      }\r\n  }\r\n  quotePointItems(reportId: $reportId) {\r\n    nodes {\r\n      id\r\n      user {\r\n        id\r\n        name\r\n        room\r\n      }\r\n      point\r\n      comment\r\n    }\r\n  }\r\n}\r\n\r\n`;\r\n\r\nexport const GET_TASKS = gql`\r\nquery GetTasks {\r\n  tasks {\r\n    nodes {\r\n      id\r\n      comment\r\n      completed\r\n      data\r\n      startTime\r\n      success\r\n      taskType\r\n      creator {\r\n        id\r\n        name\r\n      }\r\n    }\r\n  }\r\n}`;\r\n\r\nexport const GET_TASK = gql`\r\nquery GetTask($id: Int!) {\r\n  task(id: $id) {\r\n      id\r\n      comment\r\n      completed\r\n      data\r\n      startTime\r\n      success\r\n      taskType\r\n      creator {\r\n        name\r\n      }\r\n  }\r\n}`;\r\n\r\nexport const USER_GET_QUERIES = gql`\r\nquery GetUserInfo{\r\n    userInfo{\r\n        quotes{\r\n            id\r\n            post{\r\n                text\r\n                max\r\n            }\r\n        }\r\n        reportItems{\r\n            id\r\n            fromPost{\r\n                text\r\n                max\r\n            }\r\n            closed\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\nexport const GET_LIFETIME_TOKEN = gql`\r\nquery GetPost {\r\n    lifetimeToken\r\n}`;","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\comps\\DataTags.tsx",["203"],"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\createTask.tsx",["204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225"],"﻿import React, { useEffect, useState } from \"react\";\r\nimport { Link, RouteComponentProps, useHistory } from \"react-router-dom\";\r\nimport { Button, Col, DatePicker, Form, Input, message, PageHeader, Radio, Row, Space, Table, TimePicker } from \"antd\";\r\nimport { useQuery, gql, useLazyQuery, useMutation } from \"@apollo/client\";\r\nimport { MutationType, MutationTypeCreateTaskArgs, QueryType, QueryTypePostsArgs, QueryTypeReportArgs, QueryTypeReportsArgs, QueryTypeUsersArgs, ScheludedTaskType } from '../../generated/graphql'\r\nimport { ClosedTag, RepostTag, TaskTag } from \"../comps/DataTags\";\r\nimport { GET_POSTS, GET_REPORT, GET_REPORTS, GET_TASK, GET_TASKS, GET_USERS } from '../../generated/queries';\r\nimport { parseJsonText } from \"typescript\";\r\nimport { UsersTableTransfer } from \"./MultipleActionsUsers\";\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport { CREATE_TASK } from \"../../generated/mutations\";\r\nimport moment from \"moment\";\r\nimport { LoadingOutlined } from \"@ant-design/icons\";\r\nimport { Store } from \"antd/lib/form/interface\";\r\nimport { render } from \"@testing-library/react\";\r\n\r\ninterface RouterProps { // type for `match.params`\r\n    id?: string; // must be type `string` since value comes from the URL\r\n}\r\n\r\ninterface ReportProps extends RouteComponentProps<RouterProps> {\r\n    // any other props (leave empty if none)\r\n}\r\n\r\nexport const CreateTask: React.FC<ReportProps> = ({ match }) => {\r\n\r\n    let id = Number.parseInt(match.params.id ?? \"0\")\r\n\r\n    const history = useHistory()\r\n    const [state, setState] = useState<{\r\n        type: string,\r\n        targetKeys: [],\r\n        postId: number,\r\n        reportId: number,\r\n        initialValues?: Store\r\n    }>({\r\n        type: \"0\",\r\n        targetKeys: [],\r\n        postId: -1,\r\n        reportId: -1,\r\n    })\r\n\r\n\r\n    const [form] = Form.useForm()\r\n\r\n    useEffect(() => {\r\n        form.setFieldsValue(state.initialValues)\r\n    }, [form, state.initialValues])\r\n\r\n    const [loadUsers, usersData] = useLazyQuery<QueryType, QueryTypeUsersArgs>(GET_USERS, {\r\n        variables: {\r\n        }\r\n    })\r\n\r\n    const [loadPosts, postsData] = useLazyQuery<QueryType, QueryTypePostsArgs>(GET_POSTS)\r\n    const [loadReports, reportsData] = useLazyQuery<QueryType, QueryTypeReportsArgs>(GET_REPORTS)\r\n    const [loadTask, taskData] = useLazyQuery<QueryType, QueryTypeReportArgs>(GET_TASK, {\r\n        fetchPolicy: \"network-only\",\r\n        onCompleted: (data) => {\r\n            let dataJson = JSON.parse(taskData.data?.task?.data ?? \"{}\")\r\n            console.log(data.task)\r\n            console.log(moment(taskData.data?.task?.startTime))\r\n            setState({\r\n                ...state,\r\n                postId: dataJson.PostId ?? -1,\r\n                reportId: dataJson.ReportId ?? -1,\r\n                type: (data?.task?.taskType ?? 0).toString(),\r\n                targetKeys: dataJson.UserIds,\r\n                initialValues: {\r\n                    message: dataJson.Message,\r\n                    date: moment.utc(taskData.data?.task?.startTime).local(),\r\n                    time: moment.utc(taskData.data?.task?.startTime).local()\r\n                }\r\n            })\r\n        }\r\n    })\r\n\r\n    const [createTask] = useMutation<MutationType, MutationTypeCreateTaskArgs>(CREATE_TASK, {\r\n        refetchQueries: [\"GetTasks\"],\r\n        onCompleted: (data) => {\r\n            if (data.createTask) {\r\n                message.success(\"Added\")\r\n                history.goBack()\r\n            }\r\n            else\r\n                message.error(\"Error\")\r\n        },\r\n        onError: (error) => {\r\n            message.error(\"Error\")\r\n\r\n        }\r\n    })\r\n\r\n\r\n    if (id && !taskData.called && !taskData.loading) {\r\n        loadTask({ variables: { id } })\r\n    }\r\n\r\n    if (taskData.loading)\r\n        return <Row style={{ minHeight: \"100%\" }} align=\"middle\" justify=\"center\">\r\n            <Col><LoadingOutlined style={{ fontSize: 64 }} /></Col>\r\n        </Row>\r\n\r\n    if (state.type == \"1\" && !reportsData.called && !reportsData.loading)\r\n        loadReports();\r\n    if (state.type == \"2\" && !usersData.called && !usersData.loading)\r\n        loadUsers();\r\n    if (state.type == \"0\" && !postsData.called && !postsData.loading)\r\n        loadPosts();\r\n\r\n    const columns = [\r\n        {\r\n            dataIndex: 'name',\r\n            title: 'Name',\r\n            responsive: undefined,\r\n            ellipsis: true\r\n        },\r\n        {\r\n            dataIndex: 'room',\r\n            title: 'Room',\r\n            responsive: ['sm'],\r\n            ellipsis: true\r\n        }\r\n    ]\r\n\r\n    return <React.Fragment>\r\n        <PageHeader\r\n            ghost={false}\r\n            title={taskData.data?.task?`Task with id=${taskData.data?.task?.id}`:\"New Task\"}\r\n            onBack={() => window.history.back()}\r\n        />\r\n        <Row style={{ padding: 20 }} justify=\"center\">\r\n            <Col>\r\n                <Radio.Group defaultValue=\"0\" value={state.type} buttonStyle=\"solid\"\r\n                    onChange={(val) => setState({ ...state, type: val.target.value })}>\r\n                    <Radio.Button value=\"0\">Notify</Radio.Button>\r\n                    <Radio.Button value=\"1\">Close report</Radio.Button>\r\n                    <Radio.Button value=\"2\">Send message</Radio.Button>\r\n                </Radio.Group>\r\n                </Col>\r\n        </Row>\r\n        <Row justify=\"center\">\r\n            <Col>\r\n                <Form\r\n                    form={form}\r\n                    initialValues={state.initialValues}\r\n                    layout=\"vertical\"\r\n                    onFinish={values => {\r\n                        values.date.set('hour', values.time.get('hour'))\r\n                            .set('minute', values.time.get('minute'))\r\n                            .set('second', values.time.get('second'))\r\n                        if (values.time && values.date)\r\n                            createTask({\r\n                                variables: {\r\n                                    id: id > 0?id:null,\r\n                                    type: Number.parseInt(state.type),\r\n                                    startTime: moment.utc(values.date).format('DD.MM.YYYY HH:mm:ss'),\r\n                                    dataJson: JSON.stringify({\r\n                                        postId: state.postId,\r\n                                        userIds: state.targetKeys.map(t => Number.parseInt(t)),\r\n                                        reportId: state.reportId,\r\n                                        message: values.message\r\n                                    })\r\n                                } })\r\n                    }}\r\n                >\r\n                    <Form.Item name=\"date\" required label=\"Date\" initialValue={state.initialValues?.date}>\r\n                        <DatePicker />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"time\" required label=\"Time\">\r\n                        <TimePicker />\r\n                </Form.Item>\r\n                {state.type == \"0\" &&\r\n                        <>\r\n                            <Form.Item required label=\"Post\">\r\n                    <Table rowKey=\"id\" loading={postsData.loading} rowSelection={{\r\n                        type: \"radio\",\r\n                        onSelect: (sel) => {\r\n                            setState({ ...state, postId: sel.id })\r\n                        },\r\n                    }} dataSource={postsData.data?.posts?.nodes?.filter(t => !t?.isRepost) ?? new Array()}>\r\n                        <Table.Column key=\"id\" title=\"Id\" dataIndex=\"id\" sorter={(a: any, b: any) => a.id - b.id} />\r\n                        <Table.Column key=\"text\" title=\"Text\" dataIndex=\"text\" sorter={(a: any, b: any) => a.text.localeCompare(b.text)}\r\n                            render={(value, record) => <div>{record.isRepost && <RepostTag />}{value}</div>} />\r\n                    </Table>\r\n                </Form.Item>\r\n                    </>\r\n                }\r\n                    {state.type == \"1\" &&\r\n                        <Form.Item required label=\"Report\">\r\n                        <Table rowKey=\"id\" loading={reportsData.loading} rowSelection={{\r\n                        type: \"radio\",\r\n                        onSelect: (sel) => {\r\n                            setState({ ...state, reportId: sel.id })\r\n                        },\r\n                    }} dataSource={reportsData.data?.reports?.nodes ?? new Array()}>\r\n                        <Table.Column key=\"id\" title=\"Id\" dataIndex=\"id\" sorter={(a: any, b: any) => a.id - b.id} />\r\n                        <Table.Column key=\"name\" title=\"Name\" dataIndex=\"name\" sorter={(a: any, b: any) => a.name.localeCompare(b.name)}/>\r\n                        </Table>\r\n                        </Form.Item>\r\n                }\r\n                {state.type == \"2\" &&\r\n                    <>\r\n                        <Form.Item label=\"Users\" required>\r\n                            <UsersTableTransfer\r\n                                onChange={(nextTargetKeys) => setState({ ...state, targetKeys: nextTargetKeys })}\r\n                                loading={usersData.loading}\r\n                                targetKeys={state.targetKeys}\r\n                                dataSource={usersData.data?.users?.nodes?.map(t => ({ ...t, key: t?.id })) ?? new Array()}\r\n                                leftColumns={columns}\r\n                                rightColumns={columns}\r\n                                filterOption={(inputValue, item) =>\r\n                                    item.name.indexOf(inputValue) !== -1 ||\r\n                                    item.room.toString().startsWith(inputValue)\r\n                                }\r\n                                showSearch={true}>\r\n                            </UsersTableTransfer>\r\n                        </Form.Item>\r\n                        <Form.Item required name=\"message\" label=\"Message\">\r\n                            <Input.TextArea />\r\n                        </Form.Item>\r\n                    </>   \r\n                }\r\n                    <Button htmlType=\"submit\">Create</Button>\r\n                </Form>\r\n            </Col>\r\n        </Row>\r\n    </React.Fragment>\r\n\r\n}\r\n\r\nexport default CreateTask","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\MultipleActionsUsers.tsx",["226","227"],"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\generated\\mutations.ts",["228"],"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\Home.tsx",["229"],"﻿import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport VKLogin from 'react-vk-login-button'\r\nimport { Row, Col } from 'antd'\r\n\r\n\r\ninterface HomeProps {\r\n    setAuthProps: (code, redirect) => void,\r\n    className?: string\r\n}\r\n\r\nexport const Home: React.FC<HomeProps> = ({ setAuthProps, className }) => {\r\n    const history = useHistory()\r\n\r\n    return (\r\n        <div style={{ minHeight: '100vh', backgroundImage: \"url(\\\"./img/DU-about.jpg\\\"\" }} className={\"du-about \" + className ?? \"\"}>\r\n            <Row>\r\n                <Col span={6}>\r\n                    <div className=\"logo\"/>\r\n                </Col>\r\n            </Row>\r\n            <Row >\r\n                \r\n            </Row>\r\n            <Row justify=\"center\">\r\n                <Col>\r\n                <VKLogin\r\n                clientId='7423484'\r\n                callback={({ code, redirectUri }) => {\r\n                    setAuthProps(code, redirectUri)\r\n                    history.push(\"/auth\")\r\n                }}\r\n                redirect\r\n                render={renderProps => (\r\n                    <div className=\"vk-button\" onClick={renderProps.onClick}>\r\n                        Login via <img src=\"./img/iconfinder_vkontakte_306170.svg\" alt=\"\"></img>\r\n                    </div>\r\n                )}></VKLogin>\r\n                </Col>\r\n            </Row>\r\n        </div>)\r\n}","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Dash.tsx",["230","231","232"],"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Quote.js",["233","234","235","236","237","238"],"\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SwitchVerification = exports.SwitchQuote = void 0;\r\nvar antd_1 = require(\"antd\");\r\nrequire(\"./User.sass\");\r\nvar mutations_1 = require(\"../../generated/mutations\");\r\nvar key = \"SwitchMes\";\r\nvar mesloading = function () {\r\n    antd_1.message.loading({ key: key, content: \"Loading...\" });\r\n};\r\nvar mesError = function () {\r\n    antd_1.message.error({ key: key, content: \"Error\", duration: 2 });\r\n};\r\nvar mesSuccess = function () {\r\n    antd_1.message.success({ key: key, content: \"Success\", duration: 2 });\r\n};\r\nfunction SwitchQuote(client, id, callback, all) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    mesloading();\r\n                    return [4 /*yield*/, client.mutate({ mutation: mutations_1.EDIT_QUOTE_TYPE, variables: { id: id, forAdmin: all } })\r\n                            .then(function (t) {\r\n                            var _a;\r\n                            if ((_a = t.data) === null || _a === void 0 ? void 0 : _a.switchQuoteVal) {\r\n                                mesSuccess();\r\n                                callback();\r\n                            }\r\n                            else\r\n                                mesError();\r\n                        }).catch(function () { return mesError(); })];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.SwitchQuote = SwitchQuote;\r\nfunction SwitchVerification(client, id, callback, all) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    mesloading();\r\n                    return [4 /*yield*/, client.mutate({ mutation: mutations_1.EDIT_VERIFICATION_TYPE, variables: { id: id, forAdmin: all } })\r\n                            .then(function (t) {\r\n                            var _a;\r\n                            if ((_a = t.data) === null || _a === void 0 ? void 0 : _a.switchVerificationVal) {\r\n                                mesSuccess();\r\n                                callback();\r\n                            }\r\n                            else\r\n                                mesError();\r\n                        }).catch(function () { return mesError(); })];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.SwitchVerification = SwitchVerification;\r\n//# sourceMappingURL=Quote.js.map",["239","240"],"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Reports.tsx",["241","242","243","244"],"﻿import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { PageHeader, Space, Table } from \"antd\";\r\nimport { useQuery, gql } from \"@apollo/client\";\r\nimport { QueryType } from '../../generated/graphql'\r\nimport { ClosedTag, RepostTag } from \"../comps/DataTags\";\r\nimport { GET_REPORTS } from '../../generated/queries';\r\n\r\nexport const Reports: React.FC = () => {\r\n    const { data, loading } = useQuery<QueryType>(GET_REPORTS)\r\n\r\n    return <React.Fragment>\r\n        <PageHeader\r\n            ghost={true}\r\n            title=\"Reports\"\r\n            //subTitle={`Всего человек: ${state.pagination.showTotal}`}\r\n            extra={[\r\n\r\n            ]}>\r\n            <Table rowKey=\"id\" dataSource={data?.reports?.nodes ?? new Array()}\r\n                loading={loading}\r\n                pagination={{ showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} posts` }}>\r\n                {/*<Table.Column key=\"id\" title=\"Id\" dataIndex=\"id\" sorter={(a: any, b: any) => a.id - b.id} />*/}\r\n                <Table.Column key=\"name\" title=\"Name\" dataIndex=\"name\" sorter={(a: any, b: any) => a.text.localeCompare(b.text)}\r\n                    render={(item, record) => (<p><ClosedTag closed={record.closed} /> {record.name}</p>)}/>\r\n                <Table.Column key=\"max\" title=\"Max\" dataIndex=\"max\" sorter={(a: any, b: any) => a.max - b.max} />\r\n                <Table.Column\r\n                    width={42}\r\n                    title=\"Action\"\r\n                    key=\"action\"\r\n                    render={(record) => (\r\n                        <Space size=\"middle\">\r\n                            {!record.closed && <Link to={\"/panel/post/\" + record.fromPost.id}>Post</Link>}\r\n                            <Link to={\"/panel/report/\" + record.id}>View</Link>\r\n                        </Space>\r\n                    )}\r\n                />\r\n            </Table>\r\n        </PageHeader>\r\n    </React.Fragment>\r\n\r\n}\r\n\r\nexport default Reports","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\App.tsx",["245","246","247","248"],"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\GroupSettings.tsx",["249"],"import { LoadingOutlined } from \"@ant-design/icons\";\r\nimport { gql, useMutation, useQuery } from \"@apollo/client\"\r\nimport { Button, Col, Form, Input, message, PageHeader, Row, Switch } from \"antd\"\r\nimport React, { useState } from \"react\"\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { MutationType, MutationTypeUpdateGroupArgs, QueryType, QueryTypeGroupInfoArgs } from \"../../generated/graphql\";\r\nimport { UPDATE_GROUP } from \"../../generated/mutations\";\r\nimport { GET_GROUP_INFO } from \"../../generated/queries\";\r\n\r\n\r\n\r\nconst successMes = () => {\r\n    message.success('Success');\r\n};\r\n\r\nconst errorMes = () => {\r\n    message.error('Error');\r\n};\r\n\r\ninterface RouterProps { // type for `match.params`\r\n    id: string; // must be type `string` since value comes from the URL\r\n}\r\n\r\ninterface GroupProps extends RouteComponentProps<RouterProps> {\r\n    all?: boolean\r\n    newGroup?: boolean\r\n}\r\n\r\n\r\nconst Settings: React.FC<GroupProps> = ({ match, history, all, newGroup }) => {\r\n    const id: number | undefined = all ? parseInt(match.params.id) : undefined\r\n\r\n    const [state, setState] = useState<{ withFilter: boolean }>({ withFilter:false })\r\n\r\n    const { data, loading, refetch } = useQuery<QueryType, QueryTypeGroupInfoArgs>(GET_GROUP_INFO, {\r\n        variables: {\r\n            forAdmin: all,\r\n            id: id,\r\n            newGroup\r\n        },\r\n        onCompleted: (dat) => setState({ ...state, withFilter: dat?.groupInfo?.withFilter ?? false })\r\n    })\r\n\r\n    const [update] = useMutation<MutationType, MutationTypeUpdateGroupArgs>(UPDATE_GROUP, {\r\n        onCompleted: (value) => {\r\n            if (value?.updateGroup)\r\n                successMes()\r\n            else\r\n                errorMes()\r\n            if (newGroup)\r\n                history.goBack();\r\n            else\r\n            refetch?.()\r\n        },\r\n        onError: () => errorMes(),\r\n        refetchQueries: [\"GetGroups\"]\r\n    })\r\n\r\n    if (!loading)\r\n        return <React.Fragment>\r\n            <PageHeader\r\n                ghost={false}\r\n                title={data?.groupInfo?.name}\r\n                onBack={all ? (() => window.history.back()) : undefined}\r\n                subTitle={`ID: ${data?.groupInfo?.groupId}`}\r\n            //extra={<a key=\"vkLink\" target=\"_blank\" rel=\"noopener noreferrer\" href={\"https://vk.com/public\" + data?.groupInfo?.groupId}>Page</a>} \r\n            />\r\n            <Row style={{ minHeight: \"100%\" }} align=\"middle\" justify=\"center\">\r\n                <Col span={8}>\r\n                    <Form onFinish={values => {\r\n                        update({\r\n                            variables: {\r\n                                inputGroup: {\r\n                                    enabled: values.enabled,\r\n                                    name: values.name,\r\n                                    token: values.token,\r\n                                    key: values.key,\r\n                                    secret: values.secret ? values.secret : \"\",\r\n                                    keyboard: values.keyboard,\r\n                                    withFilter: values.withFilter,\r\n                                    withQrCode: values.withQrCode,\r\n                                    buildNumber: values.buildNumber,\r\n                                    filterPattern: values.filterPattern,\r\n                                    groupId: values.groupId ? parseInt(values.groupId) : undefined\r\n                                },\r\n                                id,\r\n                                forAdmin: all,\r\n                                newGroup\r\n                            }\r\n                        })\r\n                    }}>\r\n                        <Form.Item label=\"Name\" name=\"name\">\r\n                            <Input placeholder=\"Name\" required defaultValue={data?.groupInfo?.name ?? undefined} />\r\n                        </Form.Item>\r\n                        {newGroup && <Form.Item label=\"GroupId\" name=\"groupId\">\r\n                            <Input placeholder=\"GroupId\" required/>\r\n                        </Form.Item>}\r\n                        <Form.Item label=\"Building\" name=\"buildNumber\">\r\n                            <Input placeholder=\"Building\" required defaultValue={data?.groupInfo?.buildNumber ?? undefined} />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"Token\" name=\"token\">\r\n                            <Input placeholder=\"Token\" type=\"text\" required defaultValue={data?.groupInfo?.token ?? undefined} />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"Key\" name=\"key\">\r\n                            <Input placeholder=\"Key\" required defaultValue={data?.groupInfo?.key ?? undefined} />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"Secret\" name=\"secret\">\r\n                            <Input placeholder=\"Secret\" defaultValue={data?.groupInfo?.secret ?? undefined} />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"enabled\" label=\"Enabled\" valuePropName=\"checked\">\r\n                            <Switch defaultChecked={data?.groupInfo?.enabled ?? false} />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"keyboard\" label=\"Enable Keyboard\" valuePropName=\"checked\">\r\n                            <Switch defaultChecked={data?.groupInfo?.keyboard ?? false} />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"withQrCode\" label=\"Enable Qr-Codes\" valuePropName=\"checked\">\r\n                            <Switch defaultChecked={data?.groupInfo?.withQrCode ?? false} />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"withFilter\" label=\"Enable Filter\" valuePropName=\"checked\">\r\n                            <Switch onChange={(val) => setState({ ...state, withFilter: val })} defaultChecked={data?.groupInfo?.withFilter ?? false} />\r\n                        </Form.Item>\r\n                        <Form.Item hidden={!state.withFilter} name=\"filterPattern\" label=\"Filter Pattern\">\r\n                            <Input defaultValue={data?.groupInfo?.filterPattern ?? \"[��]�������\"} />\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Save Changes</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n\r\n    return <Row style={{ minHeight: \"100%\" }} align=\"middle\" justify=\"center\">\r\n        <Col flex=\"center\">\r\n            <LoadingOutlined style={{ fontSize: 64 }} />\r\n        </Col>\r\n    </Row>\r\n}\r\n\r\nexport default Settings",["250","251"],"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\serviceWorkerRegistration.ts",[],["252","253"],"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Report.tsx",["254","255","256","257","258","259","260","261","262","263"],"﻿import React, { ReactText, useState } from \"react\";\r\nimport { Redirect, Link, RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { LoadingOutlined, QrcodeOutlined } from \"@ant-design/icons\";\r\nimport { Button, Col, message, PageHeader, Row, Space, Table, Tag, Popconfirm, Modal, Dropdown, Menu } from \"antd\";\r\nimport { useQuery, gql, useMutation, useApolloClient, useLazyQuery } from \"@apollo/client\";\r\nimport { MutationType, MutationTypeCloseReportArgs, QueryType, QueryTypeUserArgs, QueryTypeReportCodeArgs, MutationTypeSendQrCodeArgs } from '../../generated/graphql'\r\nimport './User.sass'\r\nimport { SwitchVerification } from \"./Quote\";\r\nimport { ClosedTag, OutTag, RepostTag, VerifiedTag } from \"../comps/DataTags\";\r\nimport { GET_POST, GET_REPORT, GET_REPORT_CODE } from \"../../generated/queries\";\r\nimport { CLOSE_REPORT, EDIT_POST_INFO, NOTIFY_USERS, SEND_QR_CODE } from \"../../generated/mutations\";\r\nimport GetReportButton from \"../comps/GetReportButton\";\r\n\r\n\r\nconst key = \"Report\"\r\n\r\nconst mesloading = () => {\r\n    message.loading({ key, content: \"Loading...\" })\r\n};\r\nconst mesError = () => {\r\n    message.error({ key, content: \"Error\", duration: 2 })\r\n};\r\nconst mesSuccess = () => {\r\n    message.success({ key, content: \"Success\", duration: 2 })\r\n};\r\n\r\nconst isEmpty = function (str) {\r\n    return (str.length === 0 || !str.trim());\r\n};\r\n\r\ninterface RouterProps { // type for `match.params`\r\n    id: string; // must be type `string` since value comes from the URL\r\n}\r\n\r\ninterface ReportProps extends RouteComponentProps<RouterProps> {\r\n    // any other props (leave empty if none)\r\n}\r\n\r\ninterface ReportState {\r\n    QrVisible: boolean\r\n}\r\n\r\nexport const Report: React.FC<ReportProps> = ({ match }) => {\r\n    const id: number = parseInt(match.params.id)\r\n    const [state, setState] = useState<ReportState>({\r\n        QrVisible: false\r\n    })\r\n\r\n    const client = useApolloClient()\r\n    const { data, loading, refetch } = useQuery<QueryType, QueryTypeUserArgs>(GET_REPORT, {\r\n        variables: {\r\n            id\r\n        }\r\n    })\r\n\r\n    const [closeReport] = useMutation<MutationType, MutationTypeCloseReportArgs>(CLOSE_REPORT, {\r\n        onCompleted: (dat) => {\r\n            if (dat.closeReport)\r\n                mesSuccess()\r\n            else\r\n                mesError()\r\n            refetch()\r\n        },\r\n        onError: () => mesError()\r\n    })\r\n\r\n    const [sendCodes] = useMutation<MutationType, MutationTypeSendQrCodeArgs>(SEND_QR_CODE, {\r\n        onCompleted: (dat) => {\r\n            if (dat.sendQrCode)\r\n                mesSuccess()\r\n            else\r\n                mesError()\r\n        },\r\n        onError: () => mesError()\r\n    })\r\n\r\n    const [getLink] = useLazyQuery<QueryType, QueryTypeReportCodeArgs>(GET_REPORT_CODE, {\r\n        onCompleted: (dat) => {\r\n            if (dat.reportCode) {\r\n                const link = \"https://vds.nexagon.ru/qrreader/\" + dat.reportCode;\r\n                message.destroy(key)\r\n                Modal.info({\r\n                    title: \"Link\",\r\n                    content: (<a href={link}>{link}</a>)\r\n                })\r\n            }    \r\n            else\r\n                mesError()\r\n        },\r\n        onError: () => mesError()\r\n    })\r\n\r\n    if (!id || (data && !data?.report))\r\n        return <Redirect to=\"/panel/reports\" />\r\n\r\n    if (!loading && data)\r\n        return <React.Fragment>\r\n            <PageHeader\r\n                ghost={false}\r\n                title={data.report?.name ?? \"\"}\r\n                subTitle={`${data.reportItems?.totalCount} of ${data.report?.max}`}\r\n                onBack={() => window.history.back()}\r\n                extra={[\r\n                    ((data.reportItems?.totalCount ?? 1) >= (data.report?.max ?? 0)) && <Tag key=\"tag\" color=\"blue\">Full</Tag>,\r\n                    data?.report?.closed ?\r\n                        <ClosedTag closed /> :\r\n                        <Dropdown\r\n                            visible={state.QrVisible} onVisibleChange={(vis) => setState({ ...state, QrVisible: vis})}\r\n                            overlay={(\r\n                                <Menu onClick={(e) => {\r\n                                    switch (e.key) {\r\n                                        case \"getLink\":\r\n                                            getLink({ variables: { id } });\r\n                                            mesloading()\r\n                                            break;\r\n                                        case \"sendCodes\":\r\n                                            sendCodes({ variables: { id } })\r\n                                            mesloading()\r\n                                            break;\r\n                                    }\r\n                                }}>\r\n                                    <Menu.Item key=\"getLink\">Get link</Menu.Item>\r\n                                    <Menu.Item key=\"sendCodes\">Send Qr-codes</Menu.Item>\r\n                                </Menu>\r\n                            )}><Button onClick={() => setState({ ...state, QrVisible: !state.QrVisible })}><QrcodeOutlined /></Button>\r\n                        </Dropdown>,\r\n                    (data?.report?.closed ?\r\n                        <GetReportButton\r\n                            url={\"/provider/report/\" + data?.report?.id}\r\n                            filename={\"report_\" + data?.report?.id}/> :\r\n                        <Popconfirm key=\"close\" title=\"Do you sure?\" placement=\"bottomRight\" onConfirm={() => {\r\n                            closeReport({ variables: { id } })\r\n                        }}>\r\n                            <Button danger>\r\n                                Close\r\n                        </Button>\r\n                        </Popconfirm>),\r\n                ]}\r\n            >\r\n                <p>Max: {data?.report?.max}</p>\r\n            </PageHeader>\r\n            <Table dataSource={data?.reportItems?.nodes ?? new Array()} //onChange={(pagination, filters, sorter) => {\r\n                //setState({...state, sorter, pagination})}} \r\n                rowKey=\"id\"\r\n                loading={loading}\r\n                pagination={{ showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} users` }}>\r\n                <Table.Column key=\"name\" title=\"Name\" dataIndex=\"user\" render={(value) => <Link to={\"/panel/user/\" + value.id}>{value.name}</Link>} sorter={(a: any, b: any) => a.post.text.localeCompare(b.post.text)} />\r\n                <Table.Column key=\"room\" title=\"Room\" dataIndex=\"user\" render={(value) => value.room} sorter={(a: any, b: any) => a.post.max - b.post.max} />\r\n                <Table.Column key=\"state\" dataIndex=\"verified\" render={value =>\r\n                    <VerifiedTag verified={value} />\r\n                } />\r\n\r\n\r\n                {!data?.report?.closed && <Table.Column\r\n                    title=\"Action\"\r\n                    key=\"action\"\r\n                    render={(record) => (\r\n                        <Space size=\"middle\">\r\n                            <Button onClick={() => SwitchVerification(client, record.id, () => refetch())}>{record.verified ? \"Refute\" : \"Confirm\"}</Button>\r\n                        </Space>\r\n                    )}\r\n                />}\r\n\r\n            </Table>\r\n        </React.Fragment>\r\n\r\n\r\n\r\n    return <Row style={{ minHeight: \"100%\" }} align=\"middle\" justify=\"center\">\r\n        <Col><LoadingOutlined style={{ fontSize: 64 }} /></Col>\r\n    </Row>\r\n}\r\n\r\nexport default withRouter(Report)",["264","265"],"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Users.tsx",["266","267","268","269","270"],"import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Input, List, PageHeader, Select, Space, Table } from \"antd\";\r\nimport { useQuery, gql } from \"@apollo/client\";\r\nimport { QueryType, QueryTypeUsersArgs, UserType } from '../../generated/graphql'\r\nimport { RoleTag } from \"../comps/DataTags\";\r\nimport UsersTableDesktop from \"../comps/desktop/UserTable\";\r\nimport UsersTableMobile from \"../comps/mobile/UserTable\";\r\nimport { GET_USERS, GET_USERS_ALL } from \"../../generated/queries\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const Users: React.FC<{ all?: boolean, isMobile?: boolean }> = ({ all, isMobile }) => {\r\n\r\n    const [state, setState] = useState<{\r\n        search?: string,\r\n        role: number\r\n        multipleSelect: UserType[]\r\n    }>({\r\n        search: \"\",\r\n        multipleSelect: [],\r\n        role: -1\r\n    })\r\n    const { data, loading } = useQuery<QueryType, QueryTypeUsersArgs>(all ? GET_USERS_ALL : GET_USERS, {\r\n        variables: {\r\n            forAdmin: all\r\n        }\r\n    })\r\n\r\n\r\n    return <React.Fragment>\r\n        <PageHeader\r\n            ghost={true}\r\n            title={!isMobile && \"Users\"}\r\n            //subTitle={`Всего человек: ${state.pagination.showTotal}`}\r\n            extra={[\r\n                <Input\r\n                key=\"search\"\r\n                    placeholder=\"Search\"\r\n                    onChange={e => {\r\n                        setState({ ...state, search: e.target.value })\r\n                    }}\r\n                    style={{ width: 200 }} />,\r\n                isMobile && <br/>,\r\n                !all && <Select key=\"radioRoles\" onSelect={(e) => setState({ ...state, role: e })} defaultValue={-1}>\r\n                    <Select.Option value={-1}>All</Select.Option>\r\n                    <Select.Option value={0}>User</Select.Option>\r\n                    <Select.Option value={1}>GroupModer</Select.Option>\r\n                    <Select.Option value={2}>GroupAdmin</Select.Option>\r\n                </Select>,\r\n                \r\n                <Link key=\"link\" to={all ? \"/panel/admin/users/multiple\" : \"/panel/users/multiple\"}>Multiple Actions</Link>\r\n            ]}\r\n        >\r\n            {isMobile?\r\n              <UsersTableMobile all={all} search={state.search} data={data} loading={loading} role={state.role}/>\r\n            :<UsersTableDesktop all={all} search={state.search} data={data} loading={loading} role={state.role}/>}\r\n        </PageHeader>\r\n    </React.Fragment>\r\n\r\n}\r\n\r\nexport default Users","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\account\\settings.tsx",["271","272"],"﻿import { useLazyQuery, useQuery } from '@apollo/client'\r\nimport { Button, message, Modal } from 'antd'\r\nimport React from 'react'\r\nimport { QueryType } from '../../../generated/graphql'\r\nimport { GET_LIFETIME_TOKEN, GET_PROFILE } from '../../../generated/queries'\r\nimport * as serviceWorker from \"../../../serviceWorkerRegistration\";\r\n\r\n\r\nconst AccountSettings: React.FC = () => {\r\n\r\n    const { data, loading } = useQuery<QueryType>(GET_PROFILE)\r\n\r\n\r\n    const [loadToken] = useLazyQuery<QueryType>(GET_LIFETIME_TOKEN, {\r\n        onCompleted: (data) => Modal.info({\r\n            title: 'Your lifetime token',\r\n            content: (\r\n                <div>\r\n                    <p>{data.lifetimeToken}</p>\r\n                    <Button onClick={() => {\r\n                        localStorage[\"token\"] = data.lifetimeToken\r\n                    }}>Use in App</Button>\r\n                </div>\r\n            ),\r\n            onOk() { },\r\n        }),\r\n        onError: () => message.error(\"Error\")\r\n    })\r\n\r\n    return (<>\r\n        {(data?.profile?.role ?? -1) >= 2 &&\r\n                <Button onClick={() =>\r\n                    loadToken()\r\n                }>Lifetime token</Button>\r\n        }\r\n        <Button onClick={() => {\r\n            serviceWorker.unregister();\r\n            window.location.reload();\r\n        }}>Update App</Button>\r\n    </>)\r\n}\r\n\r\nexport default AccountSettings",["273","274"],"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\Login.tsx",["275"],"import { GroupResponseType, QueryType, QueryTypeAuthGroupsArgs } from '../generated/graphql'\r\nimport { GET_GROUPS_AUTH } from '../generated/queries'\r\nimport React from 'react'\r\nimport { gql, useQuery } from '@apollo/client'\r\nimport { LoadingOutlined, CheckCircleOutlined } from '@ant-design/icons'\r\nimport { Result } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\n\r\ntype LoginProps = {\r\n    callback: (response: GroupResponseType) => void\r\n    code: string,\r\n    redirectUri: string\r\n}\r\n\r\n\r\n\r\nexport const Login: React.FC<LoginProps> = ({ callback, code, redirectUri }) => {\r\n    const { data, loading, error } = useQuery<QueryType, QueryTypeAuthGroupsArgs>(GET_GROUPS_AUTH, { variables: { code: code, redirectUri: redirectUri } })\r\n    if (!loading && data?.authGroups)\r\n    {\r\n        callback(data.authGroups)\r\n    }\r\n\r\n    return (loading ? <LoadingOutlined style={{ fontSize: 64 }} /> : (error?\r\n        <Result\r\n            status=\"error\"\r\n            title=\"Authorization Error\"\r\n            subTitle=\"Please, try again\"\r\n            extra={\r\n                <Link to=\"/home\">Back</Link>\r\n            }\r\n        />\r\n        : <CheckCircleOutlined style = {{ fontSize: 64 }}/>))\r\n}\r\n\r\n","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Points.tsx",["276","277","278","279","280","281","282","283"],"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\QrReader.tsx",["284","285"],"﻿import { LoadingOutlined } from \"@ant-design/icons\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { message, Row, Col, List, Card, Switch } from \"antd\";\r\nimport Column from \"antd/lib/table/Column\";\r\nimport React, { CSSProperties, useState } from \"react\";\r\nimport { FC } from \"react\";\r\nimport QrReader from 'react-qr-scanner';\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { MutationType, MutationTypeConfirmQrCodeArgs } from \"../generated/graphql\";\r\nimport { CONFIRM_QR_CODE } from \"../generated/mutations\";\r\n\r\n\r\nconst key = \"QrReader\"\r\n\r\nconst mesloading = () => {\r\n    message.loading({ key, content: \"Loading...\" })\r\n};\r\nconst mesError = (content) => {\r\n    message.error({ key, content, duration: 2 })\r\n};\r\nconst mesSuccess = (content) => {\r\n    message.success({ key, content, duration: 2 })\r\n};\r\n\r\ninterface RouterProps { // type for `match.params`\r\n    reportId: string; // must be type `string` since value comes from the URL\r\n}\r\n\r\ninterface ReaderProps extends RouteComponentProps<RouterProps> {\r\n    // any other props (leave empty if none)\r\n}\r\nconst previewStyle: CSSProperties = {\r\n    height: 240,\r\n    maxWidth: 500\r\n}\r\n\r\ntype User = {\r\n    id: number,\r\n    name: string,\r\n    room: number\r\n}\r\n\r\nconst QrReaderForm: FC<ReaderProps> = ({ match }) => {\r\n    const reportId = match.params.reportId\r\n\r\n    const [state, setState] = useState<{ scanned: string[], loading: boolean, users: User[], cam: \"front\"|\"rear\" }>({ scanned: [], loading: true, users: [], cam: \"rear\" })\r\n\r\n    const [confirm] = useMutation<MutationType, MutationTypeConfirmQrCodeArgs>(CONFIRM_QR_CODE, {\r\n        onCompleted: (data) => {\r\n            if (data.confirmQrCode) {\r\n                mesSuccess(`${data.confirmQrCode.name}(${data.confirmQrCode.room})`)\r\n                setState({\r\n                    ...state, users: [...state.users, {\r\n                        id: data?.confirmQrCode?.id,\r\n                        name: data?.confirmQrCode?.name ?? \"Oops\",\r\n                        room: data.confirmQrCode.room\r\n                    }]\r\n                })\r\n            }\r\n            else\r\n                mesError(\"Not recognized\");\r\n        },\r\n        onError: () => mesError(\"Not recognized\")\r\n    })\r\n\r\n\r\n    return (\r\n        <div style={{ height: \"100vh\", backgroundColor: \"#d9d9d9\" }}>\r\n            <Row align=\"middle\" justify=\"center\" style={{ minHeight: \"100%\" }}>\r\n                <Col>\r\n                    <Card title=\"Scanner\" bordered={false} extra={\r\n                        <Switch checkedChildren=\"Front\" unCheckedChildren=\"Rear\" onChange={\r\n                            (checked) =>\r\n                                setState({ ...state, cam: checked?\"front\":\"rear\" })} />\r\n                    }>\r\n                        <Row align=\"middle\" justify=\"center\">\r\n                            <Col>\r\n                                {state.loading && <LoadingOutlined style={{ fontSize: 64 }} />}\r\n                            </Col>\r\n                        </Row>\r\n                        <QrReader\r\n                            onScan={(data) => {\r\n                                if (data && !state.scanned.includes(data)) {\r\n                                    console.log(data)\r\n                                    setState({ ...state, scanned: [...state.scanned, data] })\r\n                                    confirm({ variables: { eReport: reportId, eReportItem: data } })\r\n                                    mesloading()\r\n                                }\r\n\r\n                            }}\r\n                            onLoad={() => setState({ ...state, loading: false })}\r\n                            facingMode={state.cam}\r\n                            onError={() => { }}\r\n                            style={previewStyle}\r\n                        />\r\n                        <List\r\n                            dataSource={state.users.reverse()}\r\n                            renderItem={item => (\r\n                                <List.Item key={item.id}>\r\n                                    <List.Item.Meta\r\n                                        title={item.name}\r\n                                        description={item.room}\r\n                                    />\r\n                                </List.Item>\r\n                            )}\r\n                        >\r\n                        </List>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QrReaderForm","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\Auth.tsx",[],"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Point.tsx",["286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303"],"﻿import React, { ReactText, useState } from \"react\";\r\nimport { Redirect, Link, RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { LoadingOutlined, QrcodeOutlined } from \"@ant-design/icons\";\r\nimport { Button, Col, message, PageHeader, Row, Space, Table, Tag, Popconfirm, Modal, Dropdown, Menu, InputNumber } from \"antd\";\r\nimport { useQuery, gql, useMutation, useApolloClient, useLazyQuery } from \"@apollo/client\";\r\nimport { KeyValuePairOfInt32AndDoubleInput, MutationType, MutationTypeChangePointsArgs, QueryType, QueryTypeQuotePointItemsArgs, QuotePointItemType } from '../../generated/graphql'\r\nimport './User.sass'\r\nimport { VerifiedTag } from \"../comps/DataTags\";\r\nimport { GET_QUOTE_POINT_ITEMS } from \"../../generated/queries\";\r\nimport { isNumber } from \"util\";\r\nimport { CHANGE_POINTS } from \"../../generated/mutations\";\r\nimport { onError } from \"@apollo/client/link/error\";\r\nimport GetReportButton from \"../comps/GetReportButton\";\r\n\r\n\r\nconst key = \"Point\"\r\n\r\nconst mesloading = () => {\r\n    message.loading({ key, content: \"Loading...\" })\r\n};\r\nconst mesError = () => {\r\n    message.error({ key, content: \"Error\", duration: 2 })\r\n};\r\nconst mesSuccess = () => {\r\n    message.success({ key, content: \"Success\", duration: 2 })\r\n};\r\n\r\nconst isEmpty = function (str) {\r\n    return (str.length === 0 || !str.trim());\r\n};\r\n\r\ninterface RouterProps { // type for `match.params`\r\n    id: string; // must be type `string` since value comes from the URL\r\n}\r\n\r\ninterface ReportProps extends RouteComponentProps<RouterProps> {\r\n    // any other props (leave empty if none)\r\n}\r\n\r\ninterface ReportState {\r\n    QrVisible: boolean\r\n}\r\n\r\nexport const Point: React.FC<ReportProps> = ({ match }) => {\r\n    const id: number = parseInt(match.params.id)\r\n\r\n    const [state, setState] = useState<{\r\n        keyValuePairs: Map<number, number>\r\n    }>({\r\n        keyValuePairs: new Map<number, number>()\r\n    })\r\n\r\n    const { data, loading, refetch } = useQuery<QueryType, QueryTypeQuotePointItemsArgs>(GET_QUOTE_POINT_ITEMS, {\r\n        variables: {\r\n            reportId: id\r\n        }\r\n    })\r\n\r\n    const [changePoints] = useMutation<MutationType, MutationTypeChangePointsArgs>(CHANGE_POINTS, {\r\n        onCompleted: (data) => {\r\n            if (data.changePoints) {\r\n                mesSuccess()\r\n            }\r\n            else\r\n                mesError();\r\n        },\r\n        onError: () => {\r\n            mesError();\r\n        },\r\n        refetchQueries: [\"GetQuotePointItems\"]\r\n    })\r\n\r\n    if (!id || (data && !data?.quotePointItems))\r\n        return <Redirect to=\"/panel/points\" />\r\n\r\n    if (!loading && data)\r\n        return <React.Fragment>\r\n            <PageHeader\r\n                ghost={false}\r\n                title={data?.quotePoint?.name}\r\n                onBack={() => window.history.back()}\r\n                extra={[\r\n                    <Button key=\"save\" type=\"primary\" disabled={!state.keyValuePairs.size} onClick={() => {\r\n                        changePoints({\r\n                            variables: {\r\n                                quotePointId: data?.quotePoint?.id ?? 0,\r\n                                keyValuePairs: Array.from<[number, number], KeyValuePairOfInt32AndDoubleInput>(state.keyValuePairs,\r\n                                    ([key, value]) => { return { key, value } })\r\n                            }\r\n                        })\r\n                        mesloading()\r\n                    }}>Save Changes</Button>,\r\n                    <GetReportButton url={\"/provider/point_report/\" + data?.quotePoint?.id}\r\n                        filename={\"points_\" + data?.quotePoint?.id}/>\r\n                ]}\r\n            >\r\n            </PageHeader>\r\n            <Table dataSource={data?.quotePointItems?.nodes ?? new Array()} //onChange={(pagination, filters, sorter) => {\r\n                //setState({...state, sorter, pagination})}} \r\n                rowKey=\"id\"\r\n                loading={loading}\r\n                pagination={{ showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} users` }}>\r\n                <Table.Column key=\"name\" title=\"Name\" dataIndex=\"user\" render={(value) => <Link to={\"/panel/user/\" + value.id}>{value.name}</Link>} sorter={(a: any, b: any) => a.post.text.localeCompare(b.post.text)} />\r\n                <Table.Column key=\"room\" title=\"Room\" dataIndex=\"user\" render={(value) => value.room} sorter={(a: any, b: any) => a.post.max - b.post.max} />\r\n                <Table.Column key=\"point\" title=\"Point\" render={(record: QuotePointItemType) =>\r\n                (<InputNumber defaultValue={record.point} onChange={(value) => {\r\n                        if(isNumber(value))\r\n                            setState({ ...state, keyValuePairs: state.keyValuePairs.set(record?.id ,value) })\r\n                    }} />)} />\r\n\r\n            </Table>\r\n        </React.Fragment>\r\n\r\n\r\n\r\n    return <Row style={{ minHeight: \"100%\" }} align=\"middle\" justify=\"center\">\r\n        <Col><LoadingOutlined style={{ fontSize: 64 }} /></Col>\r\n    </Row>\r\n}\r\n\r\nexport default withRouter(Point)","C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\Grouplist.tsx",[],"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\PostsTable.tsx",["304","305"],"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\comps\\GetReportButton.tsx",["306"],"C:\\Users\\Artyom\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Help.tsx",["307","308","309","310","311","312"],{"ruleId":"313","replacedBy":"314"},{"ruleId":"315","replacedBy":"316"},{"ruleId":"317","severity":1,"message":"318","line":1,"column":1,"nodeType":"319","messageId":"320","fix":"321"},{"ruleId":"317","severity":1,"message":"318","line":1,"column":1,"nodeType":"319","messageId":"320","fix":"322"},{"ruleId":"323","severity":1,"message":"324","line":2,"column":26,"nodeType":"325","messageId":"326","endLine":2,"endColumn":31},{"ruleId":"323","severity":1,"message":"327","line":6,"column":10,"nodeType":"325","messageId":"326","endLine":6,"endColumn":16},{"ruleId":"323","severity":1,"message":"328","line":11,"column":13,"nodeType":"325","messageId":"326","endLine":11,"endColumn":20},{"ruleId":"323","severity":1,"message":"329","line":5,"column":20,"nodeType":"325","messageId":"326","endLine":5,"endColumn":23},{"ruleId":"323","severity":1,"message":"330","line":74,"column":24,"nodeType":"325","messageId":"326","endLine":74,"endColumn":34},{"ruleId":"331","severity":1,"message":"332","line":140,"column":61,"nodeType":"333","messageId":"334","endLine":140,"endColumn":72,"fix":"335"},{"ruleId":"331","severity":1,"message":"332","line":193,"column":89,"nodeType":"333","messageId":"334","endLine":193,"endColumn":100,"fix":"336"},{"ruleId":"313","replacedBy":"337"},{"ruleId":"315","replacedBy":"338"},{"ruleId":"331","severity":1,"message":"332","line":17,"column":46,"nodeType":"333","messageId":"334","endLine":17,"endColumn":57,"fix":"339"},{"ruleId":"323","severity":1,"message":"329","line":4,"column":20,"nodeType":"325","messageId":"326","endLine":4,"endColumn":23},{"ruleId":"323","severity":1,"message":"340","line":4,"column":25,"nodeType":"325","messageId":"326","endLine":4,"endColumn":37},{"ruleId":"323","severity":1,"message":"341","line":6,"column":10,"nodeType":"325","messageId":"326","endLine":6,"endColumn":17},{"ruleId":"323","severity":1,"message":"342","line":9,"column":10,"nodeType":"325","messageId":"326","endLine":9,"endColumn":19},{"ruleId":"323","severity":1,"message":"343","line":17,"column":21,"nodeType":"325","messageId":"326","endLine":17,"endColumn":31},{"ruleId":"331","severity":1,"message":"332","line":51,"column":67,"nodeType":"333","messageId":"334","endLine":51,"endColumn":78,"fix":"344"},{"ruleId":"323","severity":1,"message":"329","line":5,"column":20,"nodeType":"325","messageId":"326","endLine":5,"endColumn":23},{"ruleId":"331","severity":1,"message":"332","line":136,"column":69,"nodeType":"333","messageId":"334","endLine":136,"endColumn":80,"fix":"345"},{"ruleId":"331","severity":1,"message":"332","line":160,"column":109,"nodeType":"333","messageId":"334","endLine":160,"endColumn":120,"fix":"346"},{"ruleId":"331","severity":1,"message":"332","line":202,"column":66,"nodeType":"333","messageId":"334","endLine":202,"endColumn":77,"fix":"347"},{"ruleId":"313","replacedBy":"348"},{"ruleId":"315","replacedBy":"349"},{"ruleId":"323","severity":1,"message":"350","line":1,"column":10,"nodeType":"325","messageId":"326","endLine":1,"endColumn":15},{"ruleId":"323","severity":1,"message":"351","line":5,"column":10,"nodeType":"325","messageId":"326","endLine":5,"endColumn":17},{"ruleId":"331","severity":1,"message":"332","line":19,"column":111,"nodeType":"333","messageId":"334","endLine":19,"endColumn":122,"fix":"352"},{"ruleId":"317","severity":1,"message":"318","line":1,"column":1,"nodeType":"319","messageId":"320","fix":"353"},{"ruleId":"323","severity":1,"message":"329","line":4,"column":20,"nodeType":"325","messageId":"326","endLine":4,"endColumn":23},{"ruleId":"331","severity":1,"message":"332","line":33,"column":66,"nodeType":"333","messageId":"334","endLine":33,"endColumn":77,"fix":"354"},{"ruleId":"323","severity":1,"message":"329","line":1,"column":10,"nodeType":"325","messageId":"326","endLine":1,"endColumn":13},{"ruleId":"323","severity":1,"message":"355","line":2,"column":31,"nodeType":"325","messageId":"326","endLine":2,"endColumn":43},{"ruleId":"317","severity":1,"message":"318","line":1,"column":1,"nodeType":"319","messageId":"320","fix":"356"},{"ruleId":"317","severity":1,"message":"318","line":1,"column":1,"nodeType":"319","messageId":"320","fix":"357"},{"ruleId":"317","severity":1,"message":"318","line":1,"column":1,"nodeType":"319","messageId":"320","fix":"358"},{"ruleId":"323","severity":1,"message":"359","line":2,"column":10,"nodeType":"325","messageId":"326","endLine":2,"endColumn":14},{"ruleId":"323","severity":1,"message":"350","line":3,"column":81,"nodeType":"325","messageId":"326","endLine":3,"endColumn":86},{"ruleId":"323","severity":1,"message":"360","line":4,"column":10,"nodeType":"325","messageId":"326","endLine":4,"endColumn":18},{"ruleId":"323","severity":1,"message":"329","line":4,"column":20,"nodeType":"325","messageId":"326","endLine":4,"endColumn":23},{"ruleId":"323","severity":1,"message":"361","line":5,"column":146,"nodeType":"325","messageId":"326","endLine":5,"endColumn":163},{"ruleId":"323","severity":1,"message":"342","line":6,"column":10,"nodeType":"325","messageId":"326","endLine":6,"endColumn":19},{"ruleId":"323","severity":1,"message":"362","line":6,"column":32,"nodeType":"325","messageId":"326","endLine":6,"endColumn":39},{"ruleId":"323","severity":1,"message":"363","line":7,"column":21,"nodeType":"325","messageId":"326","endLine":7,"endColumn":31},{"ruleId":"323","severity":1,"message":"364","line":7,"column":56,"nodeType":"325","messageId":"326","endLine":7,"endColumn":65},{"ruleId":"323","severity":1,"message":"365","line":8,"column":10,"nodeType":"325","messageId":"326","endLine":8,"endColumn":23},{"ruleId":"323","severity":1,"message":"366","line":10,"column":8,"nodeType":"325","messageId":"326","endLine":10,"endColumn":16},{"ruleId":"323","severity":1,"message":"367","line":15,"column":10,"nodeType":"325","messageId":"326","endLine":15,"endColumn":16},{"ruleId":"368","severity":1,"message":"369","line":104,"column":20,"nodeType":"370","messageId":"320","endLine":104,"endColumn":22},{"ruleId":"368","severity":1,"message":"369","line":106,"column":20,"nodeType":"370","messageId":"320","endLine":106,"endColumn":22},{"ruleId":"368","severity":1,"message":"369","line":108,"column":20,"nodeType":"370","messageId":"320","endLine":108,"endColumn":22},{"ruleId":"368","severity":1,"message":"369","line":173,"column":29,"nodeType":"370","messageId":"320","endLine":173,"endColumn":31},{"ruleId":"331","severity":1,"message":"332","line":181,"column":95,"nodeType":"333","messageId":"334","endLine":181,"endColumn":106,"fix":"371"},{"ruleId":"368","severity":1,"message":"369","line":189,"column":33,"nodeType":"370","messageId":"320","endLine":189,"endColumn":35},{"ruleId":"331","severity":1,"message":"332","line":196,"column":72,"nodeType":"333","messageId":"334","endLine":196,"endColumn":83,"fix":"372"},{"ruleId":"368","severity":1,"message":"369","line":202,"column":29,"nodeType":"370","messageId":"320","endLine":202,"endColumn":31},{"ruleId":"331","severity":1,"message":"332","line":209,"column":111,"nodeType":"333","messageId":"334","endLine":209,"endColumn":122,"fix":"373"},{"ruleId":"331","severity":1,"message":"332","line":165,"column":85,"nodeType":"333","messageId":"334","endLine":165,"endColumn":96,"fix":"374"},{"ruleId":"331","severity":1,"message":"332","line":223,"column":87,"nodeType":"333","messageId":"334","endLine":223,"endColumn":98,"fix":"375"},{"ruleId":"317","severity":1,"message":"318","line":1,"column":1,"nodeType":"319","messageId":"320","fix":"376"},{"ruleId":"317","severity":1,"message":"318","line":1,"column":1,"nodeType":"319","messageId":"320","fix":"377"},{"ruleId":"323","severity":1,"message":"329","line":2,"column":10,"nodeType":"325","messageId":"326","endLine":2,"endColumn":13},{"ruleId":"323","severity":1,"message":"378","line":3,"column":58,"nodeType":"325","messageId":"326","endLine":3,"endColumn":62},{"ruleId":"379","severity":1,"message":"380","line":13,"column":11,"nodeType":"381","messageId":"320","endLine":13,"endColumn":13},{"ruleId":"382","severity":1,"message":"383","line":1,"column":1,"nodeType":"384","messageId":"385","endLine":1,"endColumn":14,"fix":"386"},{"ruleId":"387","severity":1,"message":"388","line":13,"column":70,"nodeType":"389","messageId":"390","endLine":13,"endColumn":71},{"ruleId":"387","severity":1,"message":"388","line":18,"column":22,"nodeType":"389","messageId":"390","endLine":18,"endColumn":23},{"ruleId":"387","severity":1,"message":"388","line":19,"column":22,"nodeType":"389","messageId":"390","endLine":19,"endColumn":23},{"ruleId":"391","severity":1,"message":"392","line":56,"column":13,"nodeType":"393","messageId":"394","endLine":72,"endColumn":14},{"ruleId":"391","severity":1,"message":"392","line":80,"column":13,"nodeType":"393","messageId":"394","endLine":96,"endColumn":14},{"ruleId":"313","replacedBy":"395"},{"ruleId":"315","replacedBy":"396"},{"ruleId":"317","severity":1,"message":"318","line":1,"column":1,"nodeType":"319","messageId":"320","fix":"397"},{"ruleId":"323","severity":1,"message":"329","line":4,"column":20,"nodeType":"325","messageId":"326","endLine":4,"endColumn":23},{"ruleId":"323","severity":1,"message":"398","line":6,"column":21,"nodeType":"325","messageId":"326","endLine":6,"endColumn":30},{"ruleId":"331","severity":1,"message":"332","line":20,"column":68,"nodeType":"333","messageId":"334","endLine":20,"endColumn":79,"fix":"399"},{"ruleId":"323","severity":1,"message":"400","line":1,"column":17,"nodeType":"325","messageId":"326","endLine":1,"endColumn":26},{"ruleId":"323","severity":1,"message":"329","line":6,"column":10,"nodeType":"325","messageId":"326","endLine":6,"endColumn":13},{"ruleId":"323","severity":1,"message":"328","line":68,"column":13,"nodeType":"325","messageId":"326","endLine":68,"endColumn":20},{"ruleId":"368","severity":1,"message":"369","line":81,"column":49,"nodeType":"370","messageId":"320","endLine":81,"endColumn":51},{"ruleId":"323","severity":1,"message":"329","line":2,"column":10,"nodeType":"325","messageId":"326","endLine":2,"endColumn":13},{"ruleId":"313","replacedBy":"401"},{"ruleId":"315","replacedBy":"402"},{"ruleId":"313","replacedBy":"403"},{"ruleId":"315","replacedBy":"404"},{"ruleId":"317","severity":1,"message":"318","line":1,"column":1,"nodeType":"319","messageId":"320","fix":"405"},{"ruleId":"323","severity":1,"message":"406","line":1,"column":17,"nodeType":"325","messageId":"326","endLine":1,"endColumn":26},{"ruleId":"323","severity":1,"message":"329","line":5,"column":20,"nodeType":"325","messageId":"326","endLine":5,"endColumn":23},{"ruleId":"323","severity":1,"message":"327","line":9,"column":21,"nodeType":"325","messageId":"326","endLine":9,"endColumn":27},{"ruleId":"323","severity":1,"message":"398","line":9,"column":29,"nodeType":"325","messageId":"326","endLine":9,"endColumn":38},{"ruleId":"323","severity":1,"message":"407","line":10,"column":10,"nodeType":"325","messageId":"326","endLine":10,"endColumn":18},{"ruleId":"323","severity":1,"message":"408","line":11,"column":24,"nodeType":"325","messageId":"326","endLine":11,"endColumn":38},{"ruleId":"323","severity":1,"message":"409","line":11,"column":40,"nodeType":"325","messageId":"326","endLine":11,"endColumn":52},{"ruleId":"323","severity":1,"message":"410","line":27,"column":7,"nodeType":"325","messageId":"326","endLine":27,"endColumn":14},{"ruleId":"331","severity":1,"message":"332","line":142,"column":60,"nodeType":"333","messageId":"334","endLine":142,"endColumn":71,"fix":"411"},{"ruleId":"313","replacedBy":"395"},{"ruleId":"315","replacedBy":"396"},{"ruleId":"323","severity":1,"message":"412","line":3,"column":17,"nodeType":"325","messageId":"326","endLine":3,"endColumn":21},{"ruleId":"323","severity":1,"message":"350","line":3,"column":43,"nodeType":"325","messageId":"326","endLine":3,"endColumn":48},{"ruleId":"323","severity":1,"message":"324","line":3,"column":50,"nodeType":"325","messageId":"326","endLine":3,"endColumn":55},{"ruleId":"323","severity":1,"message":"329","line":4,"column":20,"nodeType":"325","messageId":"326","endLine":4,"endColumn":23},{"ruleId":"323","severity":1,"message":"351","line":6,"column":10,"nodeType":"325","messageId":"326","endLine":6,"endColumn":17},{"ruleId":"317","severity":1,"message":"318","line":1,"column":1,"nodeType":"319","messageId":"320","fix":"413"},{"ruleId":"323","severity":1,"message":"328","line":11,"column":19,"nodeType":"325","messageId":"326","endLine":11,"endColumn":26},{"ruleId":"313","replacedBy":"414"},{"ruleId":"315","replacedBy":"415"},{"ruleId":"323","severity":1,"message":"329","line":4,"column":10,"nodeType":"325","messageId":"326","endLine":4,"endColumn":13},{"ruleId":"317","severity":1,"message":"318","line":1,"column":1,"nodeType":"319","messageId":"320","fix":"416"},{"ruleId":"323","severity":1,"message":"417","line":3,"column":18,"nodeType":"325","messageId":"326","endLine":3,"endColumn":23},{"ruleId":"323","severity":1,"message":"329","line":4,"column":20,"nodeType":"325","messageId":"326","endLine":4,"endColumn":23},{"ruleId":"323","severity":1,"message":"342","line":6,"column":10,"nodeType":"325","messageId":"326","endLine":6,"endColumn":19},{"ruleId":"323","severity":1,"message":"341","line":10,"column":10,"nodeType":"325","messageId":"326","endLine":10,"endColumn":17},{"ruleId":"331","severity":1,"message":"332","line":56,"column":72,"nodeType":"333","messageId":"334","endLine":56,"endColumn":83,"fix":"418"},{"ruleId":"368","severity":1,"message":"369","line":95,"column":142,"nodeType":"370","messageId":"320","endLine":95,"endColumn":144},{"ruleId":"331","severity":1,"message":"332","line":95,"column":155,"nodeType":"333","messageId":"334","endLine":95,"endColumn":166,"fix":"419"},{"ruleId":"317","severity":1,"message":"318","line":1,"column":1,"nodeType":"319","messageId":"320","fix":"420"},{"ruleId":"323","severity":1,"message":"421","line":4,"column":8,"nodeType":"325","messageId":"326","endLine":4,"endColumn":14},{"ruleId":"317","severity":1,"message":"318","line":1,"column":1,"nodeType":"319","messageId":"320","fix":"422"},{"ruleId":"323","severity":1,"message":"406","line":1,"column":17,"nodeType":"325","messageId":"326","endLine":1,"endColumn":26},{"ruleId":"323","severity":1,"message":"423","line":3,"column":27,"nodeType":"325","messageId":"326","endLine":3,"endColumn":41},{"ruleId":"323","severity":1,"message":"350","line":4,"column":49,"nodeType":"325","messageId":"326","endLine":4,"endColumn":54},{"ruleId":"323","severity":1,"message":"424","line":4,"column":63,"nodeType":"325","messageId":"326","endLine":4,"endColumn":66},{"ruleId":"323","severity":1,"message":"425","line":4,"column":68,"nodeType":"325","messageId":"326","endLine":4,"endColumn":78},{"ruleId":"323","severity":1,"message":"426","line":4,"column":80,"nodeType":"325","messageId":"326","endLine":4,"endColumn":85},{"ruleId":"323","severity":1,"message":"427","line":4,"column":87,"nodeType":"325","messageId":"326","endLine":4,"endColumn":95},{"ruleId":"323","severity":1,"message":"428","line":4,"column":97,"nodeType":"325","messageId":"326","endLine":4,"endColumn":101},{"ruleId":"323","severity":1,"message":"329","line":5,"column":20,"nodeType":"325","messageId":"326","endLine":5,"endColumn":23},{"ruleId":"323","severity":1,"message":"429","line":5,"column":38,"nodeType":"325","messageId":"326","endLine":5,"endColumn":53},{"ruleId":"323","severity":1,"message":"340","line":5,"column":55,"nodeType":"325","messageId":"326","endLine":5,"endColumn":67},{"ruleId":"323","severity":1,"message":"430","line":8,"column":10,"nodeType":"325","messageId":"326","endLine":8,"endColumn":21},{"ruleId":"323","severity":1,"message":"341","line":12,"column":10,"nodeType":"325","messageId":"326","endLine":12,"endColumn":17},{"ruleId":"323","severity":1,"message":"410","line":28,"column":7,"nodeType":"325","messageId":"326","endLine":28,"endColumn":14},{"ruleId":"323","severity":1,"message":"431","line":40,"column":11,"nodeType":"325","messageId":"326","endLine":40,"endColumn":22},{"ruleId":"323","severity":1,"message":"432","line":53,"column":28,"nodeType":"325","messageId":"326","endLine":53,"endColumn":35},{"ruleId":"331","severity":1,"message":"332","line":98,"column":64,"nodeType":"333","messageId":"334","endLine":98,"endColumn":75,"fix":"433"},{"ruleId":"323","severity":1,"message":"329","line":4,"column":20,"nodeType":"325","messageId":"326","endLine":4,"endColumn":23},{"ruleId":"331","severity":1,"message":"332","line":21,"column":62,"nodeType":"333","messageId":"334","endLine":21,"endColumn":73,"fix":"434"},{"ruleId":"317","severity":1,"message":"318","line":1,"column":1,"nodeType":"319","messageId":"320","fix":"435"},{"ruleId":"317","severity":1,"message":"318","line":1,"column":1,"nodeType":"319","messageId":"320","fix":"436"},{"ruleId":"323","severity":1,"message":"437","line":8,"column":27,"nodeType":"325","messageId":"326","endLine":8,"endColumn":31},{"ruleId":"323","severity":1,"message":"438","line":8,"column":33,"nodeType":"325","messageId":"326","endLine":8,"endColumn":37},{"ruleId":"439","severity":1,"message":"440","line":20,"column":28,"nodeType":"441","endLine":20,"endColumn":43},{"ruleId":"439","severity":1,"message":"440","line":23,"column":28,"nodeType":"441","endLine":23,"endColumn":43},{"ruleId":"439","severity":1,"message":"440","line":26,"column":28,"nodeType":"441","endLine":26,"endColumn":43},"no-native-reassign",["442"],"no-negated-in-lhs",["443"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"444","text":"445"},{"range":"446","text":"445"},"@typescript-eslint/no-unused-vars","'Table' is defined but never used.","Identifier","unusedVar","'OutTag' is defined but never used.","'loading' is assigned a value but never used.","'gql' is defined but never used.","'deleteData' is assigned a value but never used.","@typescript-eslint/no-array-constructor","The array literal notation [] is preferable.","NewExpression","useLiteral",{"range":"447","text":"448"},{"range":"449","text":"448"},["442"],["443"],{"range":"450","text":"448"},"'useLazyQuery' is defined but never used.","'onError' is defined but never used.","'ClosedTag' is defined but never used.","'masterData' is assigned a value but never used.",{"range":"451","text":"448"},{"range":"452","text":"448"},{"range":"453","text":"448"},{"range":"454","text":"448"},["442"],["443"],"'Space' is defined but never used.","'RoleTag' is defined but never used.",{"range":"455","text":"448"},{"range":"456","text":"445"},{"range":"457","text":"448"},"'DocumentNode' is defined but never used.",{"range":"458","text":"445"},{"range":"459","text":"445"},{"range":"460","text":"445"},"'Link' is defined but never used.","'useQuery' is defined but never used.","'ScheludedTaskType' is defined but never used.","'TaskTag' is defined but never used.","'GET_REPORT' is defined but never used.","'GET_TASKS' is defined but never used.","'parseJsonText' is defined but never used.","'TextArea' is defined but never used.","'render' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression",{"range":"461","text":"448"},{"range":"462","text":"448"},{"range":"463","text":"448"},{"range":"464","text":"448"},{"range":"465","text":"448"},{"range":"466","text":"445"},{"range":"467","text":"445"},"'Card' is defined but never used.","no-empty-pattern","Unexpected empty array pattern.","ArrayPattern","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"468","text":"445"},"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["442"],["443"],{"range":"469","text":"445"},"'RepostTag' is defined but never used.",{"range":"470","text":"448"},"'useEffect' is defined but never used.",["442"],["443"],["442"],["443"],{"range":"471","text":"445"},"'ReactText' is defined but never used.","'GET_POST' is defined but never used.","'EDIT_POST_INFO' is defined but never used.","'NOTIFY_USERS' is defined but never used.","'isEmpty' is assigned a value but never used.",{"range":"472","text":"448"},"'List' is defined but never used.",{"range":"473","text":"445"},["442"],["443"],{"range":"474","text":"445"},"'Input' is defined but never used.",{"range":"475","text":"448"},{"range":"476","text":"448"},{"range":"477","text":"445"},"'Column' is defined but never used.",{"range":"478","text":"445"},"'QrcodeOutlined' is defined but never used.","'Tag' is defined but never used.","'Popconfirm' is defined but never used.","'Modal' is defined but never used.","'Dropdown' is defined but never used.","'Menu' is defined but never used.","'useApolloClient' is defined but never used.","'VerifiedTag' is defined but never used.","'ReportState' is defined but never used.","'refetch' is assigned a value but never used.",{"range":"479","text":"448"},{"range":"480","text":"448"},{"range":"481","text":"445"},{"range":"482","text":"445"},"'Text' is assigned a value but never used.","'Link' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-global-assign","no-unsafe-negation",[-1,0],"",[-1,0],[5440,5451],"[]",[8101,8112],[498,509],[2210,2221],[5390,5401],[6979,6990],[9179,9190],[730,741],[-1,0],[1208,1219],[-1,0],[-1,0],[-1,0],[7424,7435],[8361,8372],[9246,9257],[5842,5853],[8157,8168],[-1,0],[-1,0],[0,13],[-1,0],[733,744],[-1,0],[5893,5904],[-1,0],[-1,0],[2002,2013],[3804,3815],[-1,0],[-1,0],[3751,3762],[768,779],[-1,0],[-1,0]]