[{"C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\Auth.tsx":"1","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Post.tsx":"2","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\User.tsx":"3","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\Grouplist.tsx":"4","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\App.tsx":"5","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Panel.tsx":"6","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\index.tsx":"7","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\Home.tsx":"8","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\PostsTable.tsx":"9","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\comps\\desktop\\UserTable.tsx":"10","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\MultipleActionsUsers.tsx":"11","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\generated\\graphql.ts":"12","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\comps\\mobile\\UserTable.tsx":"13","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Dash.tsx":"14","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\serviceWorkerRegistration.ts":"15","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Reports.tsx":"16","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Settings.tsx":"17","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\QrReader.tsx":"18","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\admin\\GroupsTable.tsx":"19","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\AuthLoading.tsx":"20","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Report.tsx":"21","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\comps\\DataTags.tsx":"22","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Users.tsx":"23","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Quote.js":"24","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\userpanel\\panel.tsx":"25","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\generated\\queries.ts":"26","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\userpanel\\Queries.tsx":"27","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\userpanel\\Panel.tsx":"28","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\Login.tsx":"29","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\generated\\mutations.ts":"30"},{"size":2979,"mtime":1606211415725,"results":"31","hashOfConfig":"32"},{"size":9792,"mtime":1606212022880,"results":"33","hashOfConfig":"32"},{"size":9894,"mtime":1606211922385,"results":"34","hashOfConfig":"32"},{"size":905,"mtime":1606128447897,"results":"35","hashOfConfig":"32"},{"size":3828,"mtime":1615117382605,"results":"36","hashOfConfig":"32"},{"size":8549,"mtime":1612984369589,"results":"37","hashOfConfig":"32"},{"size":1993,"mtime":1606256674245,"results":"38","hashOfConfig":"32"},{"size":1377,"mtime":1606211187377,"results":"39","hashOfConfig":"32"},{"size":1828,"mtime":1605804717748,"results":"40","hashOfConfig":"32"},{"size":2504,"mtime":1605989630133,"results":"41","hashOfConfig":"32"},{"size":8611,"mtime":1605802316020,"results":"42","hashOfConfig":"32"},{"size":18212,"mtime":1612982930420,"results":"43","hashOfConfig":"32"},{"size":1259,"mtime":1603974372277,"results":"44","hashOfConfig":"32"},{"size":3983,"mtime":1606137165331,"results":"45","hashOfConfig":"32"},{"size":5255,"mtime":1603836885101,"results":"46","hashOfConfig":"32"},{"size":1957,"mtime":1605980094822,"results":"47","hashOfConfig":"32"},{"size":6717,"mtime":1606001624668,"results":"48","hashOfConfig":"32"},{"size":4487,"mtime":1605980391035,"results":"49","hashOfConfig":"32"},{"size":4341,"mtime":1605823305779,"results":"50","hashOfConfig":"32"},{"size":1339,"mtime":1606211518848,"results":"51","hashOfConfig":"32"},{"size":8407,"mtime":1606222679910,"results":"52","hashOfConfig":"32"},{"size":1484,"mtime":1605822316376,"results":"53","hashOfConfig":"32"},{"size":2486,"mtime":1605802330966,"results":"54","hashOfConfig":"32"},{"size":5236,"mtime":1605819786701,"results":"55","hashOfConfig":"32"},{"size":1283,"mtime":1606236539111,"results":"56","hashOfConfig":"32"},{"size":4801,"mtime":1612983586044,"results":"57","hashOfConfig":"32"},{"size":2239,"mtime":1606257860402,"results":"58","hashOfConfig":"32"},{"size":2100,"mtime":1606249923488,"results":"59","hashOfConfig":"32"},{"size":1198,"mtime":1605802455876,"results":"60","hashOfConfig":"32"},{"size":2052,"mtime":1605960884438,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"lwgfkn",{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"86","usedDeprecatedRules":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"93","usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"79"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"108","usedDeprecatedRules":"79"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"94"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"114","usedDeprecatedRules":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"118","usedDeprecatedRules":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"115"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"127","usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"79"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":"134","usedDeprecatedRules":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"141","usedDeprecatedRules":"128"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"144","usedDeprecatedRules":"79"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"147","usedDeprecatedRules":"79"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"115"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},"C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\Auth.tsx",[],["153","154"],"C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Post.tsx",["155","156","157","158"],"C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\User.tsx",["159","160","161","162"],"import React, { useState } from \"react\";\r\nimport { Redirect, Link, RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { LoadingOutlined } from \"@ant-design/icons\";\r\nimport { Button, Col, Input, message, PageHeader, Radio, Row, Space, Table, Modal } from \"antd\";\r\nimport { useQuery, gql, useMutation, useApolloClient, useLazyQuery } from \"@apollo/client\";\r\nimport { QueryType, QueryTypeUserArgs, MutationTypeEditUserInfoArgs, MutationType, QueryTypeUserRolesArgs, QueryTypeGroupsArgs, MutationTypeRemoveRoleArgs } from '../../generated/graphql'\r\nimport './User.sass'\r\nimport { SwitchQuote } from \"./Quote\";\r\nimport { OutTag, RoleTag } from \"../comps/DataTags\";\r\nimport { GET_GROUPS, GET_ROLES, GET_USER } from \"../../generated/queries\";\r\nimport { DELETE_USER_ROLE, EDIT_USER_TYPE } from \"../../generated/mutations\";\r\n\r\n\r\n\r\nconst successMes = () => {\r\n    message.success('Success');\r\n};\r\n\r\nconst errorMes = () => {\r\n    message.error('Error');\r\n};\r\n\r\ninterface RouterProps { // type for `match.params`\r\n    id: string; // must be type `string` since value comes from the URL\r\n}\r\n\r\ninterface UserProps extends RouteComponentProps<RouterProps> {\r\n    all?: boolean,\r\n    profileRole: number\r\n}\r\n\r\ninterface UserState {\r\n    type: number,\r\n    msg: boolean,\r\n    maker: any,\r\n    name: string,\r\n    groupId: number,\r\n    modal2Visible: boolean\r\n}\r\n\r\nexport const User: React.FC<UserProps> = ({ match, all, profileRole }) => {\r\n    const id: number = parseInt(match.params.id)\r\n    const [state, setState] = useState<UserState>({\r\n        type: -1,\r\n        msg: false,\r\n        maker: null,\r\n        name: \"\",\r\n        groupId: 0,\r\n        modal2Visible: false\r\n    })\r\n\r\n    const client = useApolloClient()\r\n    const { data, loading, refetch } = useQuery<QueryType, QueryTypeUserArgs>(GET_USER, {\r\n        variables: {\r\n            id: id,\r\n            forAdmin: all\r\n        }\r\n    })\r\n\r\n    const [loadGroups, groupsData] = useLazyQuery<QueryType, QueryTypeGroupsArgs>(GET_GROUPS)\r\n\r\n    const [loadRoles, rolesData] = useLazyQuery<QueryType, QueryTypeUserRolesArgs>(GET_ROLES, {\r\n        variables: {\r\n            id\r\n        }\r\n    })\r\n\r\n    if (all && !rolesData.called)\r\n        loadRoles()\r\n\r\n    const [editInfo, mutData] = useMutation<MutationType, MutationTypeEditUserInfoArgs>(EDIT_USER_TYPE, {\r\n        onCompleted: (dat) => {\r\n            if (dat.editUserInfo)\r\n                successMes()\r\n            else\r\n                errorMes()\r\n            refetch()\r\n            if (all)\r\n                rolesData?.refetch?.()\r\n        },\r\n        onError: () => errorMes(),\r\n        refetchQueries: [\"GetUsers\"]\r\n    })\r\n\r\n    const [removeRole] = useMutation<MutationType, MutationTypeRemoveRoleArgs>(DELETE_USER_ROLE, {\r\n        onCompleted: (dat) => {\r\n            if (dat.removeRole)\r\n                successMes()\r\n            else\r\n                errorMes()\r\n            rolesData?.refetch?.()\r\n        },\r\n        onError: () => errorMes()\r\n    })\r\n\r\n    if (!id || (data && !data?.user))\r\n        return <Redirect to={(all ? \"/panel/admin/\" : \"/panel/\") + \"users\"} />\r\n\r\n    if (!loading && data)\r\n        return <React.Fragment>\r\n            <PageHeader\r\n                ghost={false}\r\n                title={<Input style={{ fontSize: 20 }} onChange={(e) => { if (e.target.value !== \"\") setState({ ...state, name: e.target.value }) }} bordered={false} defaultValue={data.user?.name ?? \"\"} />}\r\n                onBack={() => window.history.back()}\r\n                avatar={{ src: \"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\", shape: \"circle\" }}\r\n                subTitle={`Комната: ${data.user?.room}`}\r\n                extra={[\r\n                    <a key=\"vkLink\" target=\"_blank\" rel=\"noopener noreferrer\" href={`https://vk.com/id${data.user?.vkId}`}>Vk Profile</a>,\r\n                    <Button type=\"primary\" icon={mutData.loading && <LoadingOutlined />} key=\"2\" disabled={(((state?.type ?? data.user?.role) === data.user?.role) && state.name === \"\") || mutData.loading} onClick={() => {\r\n                        editInfo({\r\n                            variables: {\r\n                                id,\r\n                                newType: state?.type ?? 0,\r\n                                newName: state.name,\r\n                                forAdmin: all\r\n                            }\r\n                        })\r\n                    }}>Sibmit Changes</Button>,\r\n                    <Button key=\"1\">\r\n                        Block\r\n            </Button>,\r\n                ]}\r\n            >\r\n                {!all ? <Radio.Group disabled={(data.user?.role ?? 0) >= profileRole} onChange={(e) => setState({ ...state, type: e.target.value })} defaultValue={data.user?.role} buttonStyle=\"solid\">\r\n                    <Radio.Button value={0}>User</Radio.Button>\r\n                    <Radio.Button value={1}>GroupModer</Radio.Button>\r\n                    <Radio.Button value={2}>GroupAdmin</Radio.Button>\r\n                </Radio.Group> :\r\n                    <Button onClick={() => {\r\n                        setState({ ...state, modal2Visible: true })\r\n                        loadGroups()\r\n                    }}>Set Role</Button>}\r\n            </PageHeader>\r\n            <Row style={{ width: \"100%\" }} gutter={10}>\r\n                <Col span={all?16:24}>\r\n                    <Table dataSource={data?.qoutesByUser?.nodes ?? new Array()} //onChange={(pagination, filters, sorter) => {\r\n                        //setState({...state, sorter, pagination})}} \r\n                        loading={loading}\r\n                        rowKey=\"id\"\r\n                        pagination={{ showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} users` }}>\r\n                        <Table.Column key=\"state\" dataIndex=\"isOut\" render={value =>\r\n                            <OutTag isOut={value}/>\r\n                        } />\r\n                        <Table.Column key=\"post\" title=\"Post\" dataIndex=\"post\" render={(value) => <Link to={\"/panel/post/\" + value.id}>{value.text}</Link>} sorter={(a: any, b: any) => a.post.text.localeCompare(b.post.text)} />\r\n                        <Table.Column key=\"max\" title=\"Max\" dataIndex=\"post\" render={(value) => value.max} sorter={(a: any, b: any) => a.post.max - b.post.max} />\r\n\r\n                        <Table.Column\r\n                            title=\"Action\"\r\n                            key=\"action\"\r\n                            render={(record) => (\r\n                                <Space size=\"middle\">\r\n                                    <Button onClick={() => SwitchQuote(client, record.id, () => refetch(), all)}>{record.isOut ? \"MakeIn\" : \"MakeOut\"}</Button>\r\n                                </Space>\r\n                            )}\r\n                        />\r\n\r\n                    </Table>\r\n                </Col>\r\n                {all && <Col span={8}>\r\n                    <Table rowKey=\"id\" loading={rolesData.loading} dataSource={rolesData.data?.userRoles ?? new Array()}>\r\n                        <Table.Column key=\"buildNumber\" title=\"House\" dataIndex=\"buildNumber\" sorter={(a: any, b: any) => a.text.localeCompare(b.text)} />\r\n                        <Table.Column key=\"role\" title=\"Role\" dataIndex=\"role\" render={(role) => <RoleTag role={role} />} />\r\n                        <Table.Column key=\"delete\" title=\"Action\" render={(record) => <Button onClick={() => removeRole({ variables: { id: record.id} })}>Delete</Button>} />\r\n                    </Table>\r\n                </Col>}\r\n            </Row>\r\n            \r\n\r\n            <Modal\r\n                title=\"Add to Post\"\r\n                style={{ top: 20 }}\r\n                visible={state.modal2Visible}\r\n                onOk={() => {\r\n                    if (state.groupId < 1)\r\n                        message.warning(\"Select Group\")\r\n                    else {\r\n                        setState({ ...state, modal2Visible: false })\r\n                        editInfo({\r\n                            variables: {\r\n                                groupId: state.groupId,\r\n                                newType: state.type,\r\n                                forAdmin: all,\r\n                                id\r\n                            }\r\n                        })\r\n                    }\r\n                }}\r\n                onCancel={() => setState({ ...state, modal2Visible: false })}\r\n            >\r\n                <Radio.Group onChange={(e) => setState({ ...state, type: e.target.value })} buttonStyle=\"solid\">\r\n                    <Radio.Button value={0}>User</Radio.Button>\r\n                    <Radio.Button value={1}>GroupModer</Radio.Button>\r\n                    <Radio.Button value={2}>GroupAdmin</Radio.Button>\r\n                    <Radio.Button value={3}>Moder</Radio.Button>\r\n                    <Radio.Button value={4}>Admin</Radio.Button>\r\n                </Radio.Group>\r\n                <Table rowKey=\"id\" loading={groupsData.loading} rowSelection={{\r\n                    type: \"radio\",\r\n                    onSelect: (sel) => {\r\n                        setState({ ...state, groupId: sel.id })\r\n                    }\r\n                }} dataSource={groupsData.data?.groups?.nodes ?? new Array()}>\r\n                    <Table.Column key=\"name\" title=\"Name\" dataIndex=\"name\" sorter={(a: any, b: any) => a.name.localeCompare(b.name)} />\r\n                    <Table.Column key=\"buildNumber\" title=\"House\" dataIndex=\"buildNumber\" sorter={(a: any, b: any) => a.buildNumber.localeCompare(b.buildNumber)} />\r\n                </Table>\r\n            </Modal>\r\n        </React.Fragment>\r\n\r\n    return <Row style={{ minHeight: \"100%\" }} align=\"middle\" justify=\"center\">\r\n        <Col><LoadingOutlined style={{ fontSize: 64 }} /></Col>\r\n    </Row>\r\n}\r\n\r\n//{ all && <Radio.Button value={3}>Moder</Radio.Button> }\r\n//{ all && <Radio.Button value={4}>Admin</Radio.Button> }\r\n\r\nexport default withRouter(User)",["163","164"],"C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\Grouplist.tsx",[],["165","166"],"C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\App.tsx",["167","168","169","170"],"C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Panel.tsx",["171"],"import React, { useState } from \"react\";\r\nimport './Panel.less'\r\nimport { Layout, Menu, Space, Col, Row, Button, Switch as CheckSwitch, Modal, message } from 'antd'\r\nimport { SettingOutlined, LogoutOutlined, DashboardOutlined, BorderlessTableOutlined, LoadingOutlined, SnippetsOutlined, MenuOutlined } from \"@ant-design/icons\";\r\nimport { Redirect, useHistory, Switch, Route } from \"react-router-dom\";\r\nimport Users from \"./Users\";\r\nimport User from './User'\r\nimport Posts from \"./PostsTable\";\r\nimport Post from \"./Post\";\r\nimport { useLazyQuery, useQuery } from \"@apollo/client\";\r\nimport { QueryType } from \"../../generated/graphql\";\r\nimport Settings from \"./Settings\";\r\nimport Dash from \"./Dash\";\r\nimport MultipleActionsUsers from \"./MultipleActionsUsers\";\r\nimport GroupsTable from \"./admin/GroupsTable\";\r\nimport { GET_LIFETIME_TOKEN, GET_PROFILE } from \"../../generated/queries\";\r\nimport { Reports } from \"./Reports\";\r\nimport Report from \"./Report\";\r\n\r\nconst { Header, Content, Sider } = Layout;\r\n\r\ntype ItemType = {\r\n    path: string,\r\n    key: string,\r\n}\r\n\r\nconst ContentItems: ItemType[] = [\r\n    {\r\n        path: \"/panel/dash\",\r\n        key: \"dash\"\r\n    },\r\n    {\r\n        path: \"/panel/users\",\r\n        key: \"users\"\r\n    },\r\n    {\r\n        path: \"/panel/posts\",\r\n        key: \"posts\"\r\n    },\r\n    {\r\n        path: \"/panel/reports\",\r\n        key: \"reports\"\r\n    },\r\n    {\r\n        path: \"/panel/admin/users\",\r\n        key: \"adm_users\"\r\n    },\r\n    {\r\n        path: \"/panel/admin/dash\",\r\n        key: \"adm_dash\"\r\n    },\r\n    {\r\n        key: \"adm_groups\",\r\n        path: \"/panel/admin/groups\"\r\n    }\r\n]\r\n\r\n\r\nconst Panel: React.FC = () => {\r\n    const [state, setState] = useState<{ collapsed: boolean }>({\r\n        collapsed: false\r\n    })\r\n    const history = useHistory()\r\n\r\n    const isMobile = window.innerWidth < 560;\r\n\r\n\r\n    const { data, loading } = useQuery<QueryType>(GET_PROFILE)\r\n\r\n    const [ loadToken ] = useLazyQuery<QueryType>(GET_LIFETIME_TOKEN, {\r\n        onCompleted: (data) => Modal.info({\r\n            title: 'Your lifetime token',\r\n            content: (\r\n                <div>\r\n                    <p>{data.lifetimeToken}</p>\r\n                </div>\r\n            ),\r\n            onOk() { },\r\n        }),\r\n        onError: () => message.error(\"Error\")\r\n    })\r\n\r\n    if (!loading && data)\r\n        return (\r\n            <Layout style={{ minHeight: '100vh' }}>\r\n                <Sider collapsible breakpoint=\"lg\" collapsed={state.collapsed} onCollapse={(collapsed) => setState({ collapsed })} collapsedWidth=\"0\" trigger={null}>\r\n                    <div className=\"logo\" />\r\n                    <Menu theme=\"dark\" defaultSelectedKeys={ContentItems.filter(t => history.location.pathname.startsWith(t.path)).map(t => t.key)} mode=\"vertical\" onClick={({ key }) => {\r\n                        history.push(ContentItems.find(t => t.key === key)?.path ?? \"\")\r\n                    }}>\r\n                        <Menu.Item key=\"dash\" icon={<DashboardOutlined />}>Dashboard</Menu.Item>\r\n                        <Menu.Item key=\"users\" icon={<BorderlessTableOutlined />}>Users</Menu.Item>\r\n                        <Menu.Item key=\"posts\" icon={<SnippetsOutlined />}>Posts</Menu.Item>\r\n                        <Menu.Item key=\"reports\" icon={<SnippetsOutlined />}>Reports</Menu.Item>\r\n                        {(data?.profile?.role ?? 0) > 2 &&\r\n                            <Menu.SubMenu title=\"For Admins\">\r\n                                <Menu.Item key=\"adm_dash\" icon={<DashboardOutlined />}>Dashboard</Menu.Item>\r\n                                <Menu.Item key=\"adm_users\" icon={<DashboardOutlined />}>Users</Menu.Item>\r\n                                <Menu.Item key=\"adm_groups\" icon={<DashboardOutlined />}>Groups</Menu.Item>\r\n\r\n                            </Menu.SubMenu>\r\n                        }\r\n                    </Menu>\r\n                </Sider>\r\n                <Layout className=\"site-layout\">\r\n                    <Header style={{ padding: 0, alignItems: \"end\" }} className=\"site-layout-background\">\r\n                        <Row justify=\"center\" gutter={[20, 24]} style={{ marginLeft: 20, marginRight: 20 }}>\r\n                            <Col flex=\"60px\" className=\"row-gutter\">\r\n                                <MenuOutlined onClick={() => setState({ collapsed: !state.collapsed })} />\r\n                            </Col>\r\n                            <Col flex=\"auto\" className=\"row-gutter\">\r\n                                <Space align=\"baseline\" direction=\"horizontal\">\r\n\r\n                                    <h3>QuoteBot Panel</h3>\r\n                                </Space>\r\n                            </Col>\r\n                            {(data.profile?.role ?? -1) >= 2 &&\r\n                                <Col flex=\"60px\" className=\"row-gutter\">\r\n                                    <Button onClick={() =>\r\n                                        loadToken()\r\n                                    }>Lifetime token</Button>\r\n                                </Col>\r\n                            }\r\n                            <Col flex=\"60px\" className=\"row-gutter\">\r\n                                <Button shape=\"circle\" onClick={() => history.push(\"/panel/settings\")}><SettingOutlined /></Button>\r\n                            </Col>\r\n                            <Col flex=\"60px\" className=\"row-gutter\">\r\n                                <Button shape=\"circle\" onClick={() => history.push(\"/logout\")}><LogoutOutlined /></Button>\r\n                            </Col>\r\n                        </Row>\r\n                    </Header>\r\n                    <Layout style={{ padding: '36px' }} >\r\n                        <Content\r\n                            className=\"site-layout-background\"\r\n                            style={{\r\n                                padding: 24,\r\n                                margin: 0,\r\n                                minHeight: 280,\r\n                            }}>\r\n                            <Switch>\r\n                                <Redirect exact from=\"/panel/\" to=\"/panel/dash\" />\r\n                                <Route path=\"/panel/dash\" component={() => <Dash />} />\r\n\r\n                                <Route exact path=\"/panel/users\" component={() => <Users isMobile={isMobile} />} />\r\n                                <Route path=\"/panel/user/:id\" component={() => <User profileRole={data?.profile?.role ?? 0} />} />\r\n                                <Route path=\"/panel/users/multiple\" component={() => <MultipleActionsUsers />} />\r\n\r\n                                <Route path=\"/panel/posts\" component={() => <Posts />} />\r\n                                <Route path=\"/panel/post/:id\" component={() => <Post />} />\r\n\r\n                                <Route path=\"/panel/reports\" component={() => <Reports />} />\r\n                                <Route path=\"/panel/report/:id\" component={() => <Report />} />\r\n\r\n                                <Route path=\"/panel/settings\" component={(props) => <Settings {...props} />} />\r\n\r\n                                \r\n                                <Route path=\"/panel/admin/dash\" component={() => <Dash all />} />\r\n\r\n                                <Route exact path=\"/panel/admin/users\" component={() => <Users all isMobile={isMobile} />} />\r\n                                <Route path=\"/panel/admin/user/:id\" component={() => <User all profileRole={data?.profile?.role ?? 0} />} />\r\n                                <Route path=\"/panel/admin/users/multiple\" component={() => <MultipleActionsUsers all />} />\r\n\r\n                                <Route path=\"/panel/admin/posts\" component={() => <Posts all />} />\r\n                                <Route path=\"/panel/admin/post/:id\" component={() => <Post />} />\r\n\r\n                                <Route exact path=\"/panel/admin/groups\" component={() => <GroupsTable />} />\r\n                                <Route path=\"/panel/admin/group/add\" component={(props) => <Settings all newGroup {...props} />} />\r\n                                <Route path=\"/panel/admin/group/:id\" component={(props) => <Settings all {...props} />} />\r\n\r\n\r\n                                <Route path=\"*\" component={() => <h3>Not Found</h3>} />\r\n                            </Switch>\r\n                        </Content>\r\n                    </Layout>\r\n                </Layout>\r\n            </Layout>\r\n        )\r\n\r\n    return <Row style={{ minHeight: \"100vh\" }} align=\"middle\" justify=\"center\">\r\n        <Col><LoadingOutlined style={{ fontSize: 64 }} /></Col>\r\n    </Row>\r\n}\r\n\r\nexport default Panel",["172","173"],"C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\index.tsx",[],"C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\Home.tsx",["174"],"C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\PostsTable.tsx",["175","176"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { PageHeader, Space, Table } from \"antd\";\r\nimport { useQuery, gql } from \"@apollo/client\";\r\nimport { QueryType, QueryTypePostsArgs } from '../../generated/graphql'\r\nimport { RepostTag } from \"../comps/DataTags\";\r\nimport { GET_POSTS_DETAILED } from \"../../generated/queries\";\r\n\r\n\r\nexport const Posts: React.FC<{ all?: boolean }> = ({ all }) => {\r\n    const { data, loading } = useQuery<QueryType, QueryTypePostsArgs>(GET_POSTS_DETAILED)\r\n\r\n    return <React.Fragment>\r\n    <PageHeader\r\n      ghost={true}\r\n      title=\"Posts\"\r\n      //subTitle={`Всего человек: ${state.pagination.showTotal}`}\r\n      extra={[\r\n        \r\n      ]}>\r\n        <Table rowKey=\"id\" dataSource={data?.posts?.nodes ?? new Array()} //onChange={(pagination, filters, sorter) => {\r\n            //setState({...state, sorter, pagination})}} \r\n            loading={loading} \r\n            pagination={{showTotal : (total, range) => `${range[0]}-${range[1]} of ${total} posts`}}>\r\n                <Table.Column key=\"id\" title=\"Id\" dataIndex=\"id\" sorter={(a: any,b: any) => a.id - b.id}/>\r\n                <Table.Column key=\"text\" title=\"Text\" dataIndex=\"text\" sorter={(a: any, b: any) => a.text.localeCompare(b.text)}\r\n                    render={(value, record) => <div>{record.isRepost && <RepostTag />}{value}</div>} />\r\n                <Table.Column key=\"max\" title=\"Max\" dataIndex=\"max\" sorter={(a: any,b: any) => a.max - b.max}/>\r\n                <Table.Column\r\n      width={36}\r\n      title=\"Action\"\r\n      key=\"action\"\r\n      render={(record) => (\r\n        <Space size=\"middle\">\r\n          <Link to={\"/panel/post/\"+record.id}>View</Link>\r\n        </Space>\r\n      )}\r\n    />\r\n            </Table>\r\n    </PageHeader>\r\n    </React.Fragment>\r\n\r\n}\r\n\r\nexport default Posts",["177","178"],"C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\comps\\desktop\\UserTable.tsx",["179"],"import { Space, Table } from \"antd\";\r\nimport React, { FC } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { QueryType } from \"../../../generated/graphql\";\r\nimport { RoleTag } from \"../DataTags\";\r\n\r\n\r\ntype UsersTableProps = {\r\n    data: QueryType | undefined, \r\n    loading: boolean, \r\n    all?: boolean, \r\n    search?: string, \r\n    role: number\r\n}\r\n\r\nconst UsersTable : FC<UsersTableProps> = ({data, loading, role, all, search}) => (\r\n    <Table dataSource={data?.users?.nodes ?? new Array()} //onChange={(pagination, filters, sorter) => {\r\n                //setState({...state, sorter, pagination})}} \r\n                rowKey=\"id\"\r\n                loading={loading}\r\n        pagination={{ showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} users` }}>\r\n        <Table.Column key=\"name\" title=\"Name\" filterMultiple filteredValue={[search ?? \"\"]} onFilter={(value, record) =>\r\n                    record.name.indexOf(value) !== -1 ||\r\n                    record.room.toString().startsWith(value) ||\r\n                    (all && record.buildNumber.startsWith(value))\r\n                } dataIndex=\"name\" sorter={(a: any, b: any) => a.name.localeCompare(b.name)} />\r\n                <Table.Column key=\"room\" title=\"Room\" dataIndex=\"room\" sorter={(a: any, b: any) => a.room - b.room} />\r\n                {all && <Table.Column key=\"buildNumber\" title=\"House\" dataIndex=\"buildNumber\" sorter={(a: any, b: any) => a.name.localeCompare(b.name)} />}\r\n                {all && <Table.Column key=\"group\" title=\"Group\" responsive={['md']} dataIndex=\"group\" sorter={(a: any, b: any) => a.name.localeCompare(b.name)} render={(value) => <Link to={`/panel/admin/group/${value.id}`}>{value.name}</Link>} />}\r\n                {!all && <Table.Column key=\"role\" title=\"Role\" filteredValue={(role!==-1)?[role]:null} dataIndex=\"role\" filterMultiple render={\r\n                    role => (<RoleTag role={role} />)\r\n                } onFilter={\r\n                    (value, record: any) => record.role === value\r\n                } />}\r\n                <Table.Column\r\n                    width={36}\r\n                    title=\"Action\"\r\n                    key=\"action\"\r\n                    render={(record) => (\r\n                        <Space size=\"middle\">\r\n                            <Link to={(all ? \"/panel/admin/user/\" : \"/panel/user/\") + record.id}>View</Link>\r\n                        </Space>\r\n                    )}\r\n                />\r\n            </Table>\r\n)\r\n\r\nexport default UsersTable","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\MultipleActionsUsers.tsx",["180","181"],"import React, { useState } from \"react\";\r\nimport { Button, message, Modal, PageHeader, Table, Transfer } from \"antd\";\r\nimport { useQuery, gql, useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport { MutationType, MutationTypeSendUsersArgs, QueryType, QueryTypeUsersArgs, QueryTypePostsArgs, MutationTypeAddUsersToPostArgs } from '../../generated/graphql'\r\nimport difference from 'lodash/difference';\r\nimport TextArea from \"antd/lib/input/TextArea\";\r\nimport { RepostTag } from \"../comps/DataTags\";\r\nimport { GET_POSTS, GET_USERS } from \"../../generated/queries\";\r\n\r\nconst SEND_MESSAGE_USERS = gql`\r\nmutation SendMessageUsers($message: String!, $usersIds: [Int!], $forAdmin: Boolean) {\r\n    sendUsers(message: $message, usersIds: $usersIds, forAdmin: $forAdmin)\r\n}`;\r\n\r\nconst ADD_USERS_TO_POST = gql`\r\nmutation AddUsersToPost($postId: Int!, $usersIds: [Int!]) {\r\n    addUsersToPost(postId: $postId, usersIds: $usersIds)\r\n}`;\r\n\r\nconst successMes = (mess: string = \"Success\") => {\r\n    message.success(mess);\r\n  };\r\n  \r\n  const errorMes = () => {\r\n    message.error('Error');\r\n  };\r\n\r\nconst TableTransfer = ({ leftColumns, rightColumns, ...restProps }) => (\r\n    <Transfer {...restProps} showSelectAll={false}>\r\n        {({\r\n            direction,\r\n            filteredItems,\r\n            onItemSelectAll,\r\n            onItemSelect,\r\n            selectedKeys: listSelectedKeys,\r\n            disabled: listDisabled,\r\n        }) => {\r\n            const columns = direction === 'left' ? leftColumns : rightColumns;\r\n\r\n            const rowSelection = {\r\n                getCheckboxProps: item => ({ disabled: listDisabled || item.disabled }),\r\n                onSelectAll(selected, selectedRows) {\r\n                    const treeSelectedKeys = selectedRows\r\n                        .filter(item => !item.disabled)\r\n                        .map(({ key }) => key);\r\n                    const diffKeys = selected\r\n                        ? difference(treeSelectedKeys, listSelectedKeys)\r\n                        : difference(listSelectedKeys, treeSelectedKeys);\r\n                    onItemSelectAll(diffKeys, selected);\r\n                },\r\n                onSelect({ key }, selected) {\r\n                    onItemSelect(key, selected);\r\n                },\r\n                selectedRowKeys: listSelectedKeys,\r\n            };\r\n\r\n            return (\r\n                <Table\r\n                    rowSelection={rowSelection}\r\n                    columns={columns}\r\n                    dataSource={filteredItems}\r\n                    size=\"small\"\r\n                    onRow={({ key, disabled: itemDisabled }) => ({\r\n                        onClick: () => {\r\n                            if (itemDisabled || listDisabled) return;\r\n                            onItemSelect(key, !listSelectedKeys.includes(key));\r\n                        },\r\n                    })}\r\n                />\r\n            );\r\n        }}\r\n    </Transfer>\r\n);\r\n\r\nconst isEmpty = function(str) {\r\n    return (str.length === 0 || !str.trim());\r\n};\r\n\r\n\r\nexport const MultipleActionsUsers: React.FC<{ all?: boolean }> = ({ all }) => {\r\n\r\n    const [state, setState] = useState<{\r\n        search: string | undefined,\r\n        targetKeys: [],\r\n        modal1Visible: boolean,\r\n        modal2Visible: boolean,\r\n        messageText: string,\r\n        postId: number\r\n    }>({\r\n        search: \"\",\r\n        targetKeys: [],\r\n        modal1Visible: false,\r\n        modal2Visible: false,\r\n        messageText: \"\",\r\n        postId: 0\r\n    })\r\n    const { data, loading } = useQuery<QueryType, QueryTypeUsersArgs>(GET_USERS, {\r\n        variables: {\r\n            forAdmin: all\r\n        }\r\n    })\r\n\r\n    const [loadPosts, postsData] = useLazyQuery<QueryType,QueryTypePostsArgs>(GET_POSTS)\r\n\r\n    const [ send ] = useMutation<MutationType,MutationTypeSendUsersArgs>(SEND_MESSAGE_USERS, {\r\n        onCompleted: (dat) => {\r\n            if (dat.sendUsers)\r\n                successMes()\r\n            else\r\n                errorMes()\r\n        },\r\n        onError: () => errorMes()\r\n    })\r\n\r\n    const [add] = useMutation<MutationType, MutationTypeAddUsersToPostArgs>(ADD_USERS_TO_POST, {\r\n        onCompleted: (dat) => {\r\n            if (dat.addUsersToPost > -1)\r\n                successMes(`${dat.addUsersToPost} added`)\r\n            else\r\n                errorMes()\r\n        },\r\n        onError: () => errorMes()\r\n    })\r\n\r\n    const columns = [\r\n        {\r\n            dataIndex: 'name',\r\n            title: 'Name',\r\n            responsive: undefined,\r\n            ellipsis: true\r\n        },\r\n        {\r\n            dataIndex: 'room',\r\n            title: 'Room',\r\n            responsive: ['sm'],\r\n            ellipsis: true\r\n        }\r\n    ]\r\n\r\n    if(all)\r\n        columns.push({\r\n            dataIndex: \"buildNumber\",\r\n            title: \"House\",\r\n            responsive: ['md'],\r\n            ellipsis: false\r\n        })\r\n\r\n    return <React.Fragment>\r\n        <PageHeader\r\n            ghost={true}\r\n            title=\"Users Actions\"\r\n            //subTitle={`Всего человек: ${state.pagination.showTotal}`}\r\n            extra={[\r\n                <Button key=\"send\" disabled={state.targetKeys.length === 0} type=\"primary\" onClick={() => setState({ ...state, modal1Visible: true })}>Send Message</Button>,\r\n                !all && <Button key=\"add\" disabled={state.targetKeys.length === 0} type=\"primary\" onClick={() => {\r\n                    loadPosts()\r\n                    setState({ ...state, modal2Visible: true })\r\n                }}>Add to Post</Button>\r\n            ]}\r\n        >\r\n            <TableTransfer\r\n                onChange={(nextTargetKeys) => setState({ ...state, targetKeys: nextTargetKeys })}\r\n                loading={loading}\r\n                targetKeys={state.targetKeys}\r\n                dataSource={data?.users?.nodes?.map(t => ({ ...t, key: t?.id })) ?? new Array()}\r\n                leftColumns={columns}\r\n                rightColumns={columns}\r\n                filterOption={(inputValue, item) =>\r\n                    item.name.indexOf(inputValue) !== -1 ||\r\n                    item.room.toString().startsWith(inputValue) ||\r\n                    (all && item.buildNumber.startsWith(inputValue))\r\n                }\r\n                showSearch={true}>\r\n\r\n            </TableTransfer>\r\n        </PageHeader>\r\n\r\n        <Modal\r\n            title=\"Send Message\"\r\n            style={{ top: 20 }}\r\n            visible={state.modal1Visible}\r\n            onOk={() => {\r\n                if(isEmpty(state.messageText))\r\n                    message.warning(\"Must not be empty\")\r\n                    else{\r\n                        setState({ ...state, modal1Visible: false })\r\n                        send({variables: {\r\n                            message: state.messageText,\r\n                            usersIds: state.targetKeys,\r\n                            forAdmin: all\r\n                        }})\r\n                    }\r\n            }}\r\n            onCancel={() => setState({ ...state, modal1Visible: false })}\r\n        >\r\n            <p>Enter Message</p>\r\n            <TextArea rows={4} onChange={e => setState({ ...state, messageText: e.target.value})}/>\r\n        </Modal>\r\n        <Modal\r\n            title=\"Add to Post\"\r\n            style={{ top: 20 }}\r\n            visible={state.modal2Visible}\r\n            onOk={() => {\r\n                if (state.postId < 1)\r\n                    message.warning(\"Select Post\")\r\n                else {\r\n                    setState({ ...state, modal2Visible: false })\r\n                    add({\r\n                        variables: {\r\n                            postId: state.postId,\r\n                            usersIds: state.targetKeys\r\n                        }\r\n                    })\r\n                }\r\n            }}\r\n            onCancel={() => setState({ ...state, modal2Visible: false })}\r\n        >\r\n            <Table rowKey=\"id\" loading={postsData.loading} rowSelection={{\r\n                type: \"radio\",\r\n                onSelect: (sel) => {\r\n                    setState({ ...state, postId: sel.id })\r\n                },\r\n            }} dataSource={postsData.data?.posts?.nodes?.filter(t => !t?.isRepost) ?? new Array()}>\r\n                <Table.Column key=\"id\" title=\"Id\" dataIndex=\"id\" sorter={(a: any, b: any) => a.id - b.id} />\r\n                <Table.Column key=\"text\" title=\"Text\" dataIndex=\"text\" sorter={(a: any, b: any) => a.text.localeCompare(b.text)}\r\n                    render={(value, record) => <div>{record.isRepost && <RepostTag />}{value}</div>}/>\r\n            </Table>\r\n        </Modal>\r\n    </React.Fragment>\r\n\r\n}\r\n\r\nexport default MultipleActionsUsers",["182","183"],"C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\generated\\graphql.ts",["184","185"],"C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\comps\\mobile\\UserTable.tsx",["186","187","188"],"import { Space, List } from \"antd\";\r\nimport React, { FC } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { QueryType } from \"../../../generated/graphql\";\r\nimport { RoleTag } from \"../DataTags\";\r\n\r\n\r\ntype UsersTableProps = {\r\n    data: QueryType | undefined, \r\n    loading: boolean, \r\n    all?: boolean, \r\n    search?: string, \r\n    role: number\r\n}\r\n\r\nconst UsersTable : FC<UsersTableProps> = ({data, loading, role, all, search}) => (\r\n    <List dataSource={data?.users?.nodes?.filter(record => (record?.name?.indexOf(search ?? \"\") !== -1 ||\r\n        record?.room.toString().startsWith(search ?? \"\") ||\r\n        (all && record?.buildNumber?.startsWith(search ?? \"\"))) && (role === -1 || record?.role === role)) ?? new Array()}\r\n                rowKey=\"id\"\r\n                loading={loading}\r\n                pagination={{ simple: true }}\r\n                renderItem={(item)=><List.Item actions={[<Link to={(all ? \"/panel/admin/user/\" : \"/panel/user/\") + item.id}>View</Link>]}>\r\n                    <List.Item.Meta\r\n                    title={item?.name}\r\n                    description={all?`${item?.buildNumber}(${item?.room})`:item?.room}\r\n                    />\r\n                </List.Item>}>\r\n    </List>\r\n)\r\n\r\nexport default UsersTable","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Dash.tsx",["189","190"],"import { LoadingOutlined, UserOutlined, CheckOutlined } from \"@ant-design/icons\";\r\nimport { gql, useQuery } from \"@apollo/client\"\r\nimport { Col, PageHeader, Row, Space, Statistic, Select } from \"antd\"\r\nimport React, { useState } from \"react\"\r\nimport { QueryType, QueryTypeStatArgs } from \"../../generated/graphql\";\r\nimport { BarChart, Bar, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Area, AreaChart, ResponsiveContainer, } from 'recharts'\r\nimport { EnabledTag } from \"../comps/DataTags\";\r\nimport { GET_DASHBOARD_INFO, GET_DASHBOARD_INFO_ALL } from \"../../generated/queries\";\r\n\r\n\r\n\r\nconst Dash: React.FC<{ all?: boolean }> = ({ all }) => {\r\n    const [] = useState<{ group?: number }>()\r\n    const { data, loading, refetch } = useQuery<QueryType, QueryTypeStatArgs>(all ? GET_DASHBOARD_INFO_ALL : GET_DASHBOARD_INFO)\r\n\r\n    if (!loading)\r\n        return <React.Fragment>\r\n            <PageHeader\r\n                ghost={false}\r\n                title=\"Dashboard\"\r\n                style={{ marginBottom: 20 }}\r\n                subTitle={\r\n                    <Space>\r\n                        {data?.groupInfo?.name}\r\n                        <EnabledTag enable={data?.groupInfo?.enabled ?? false} />\r\n                    </Space>}\r\n                extra={[\r\n                    all && <Select\r\n                        style={{ width: 200 }}\r\n                        onChange={(value) => { refetch({ forAdmin: all, groupId: parseInt(value.toString()) }) }}\r\n                        placeholder=\"Select group\">\r\n                        {data?.groups?.nodes?.map(t => <Select.Option value={t?.id?.toString() ?? \"\"}>{t?.buildNumber}</Select.Option>)}\r\n                    </Select>,\r\n                    <a key=\"vkLink\" target=\"_blank\" rel=\"noopener noreferrer\" href={\"https://vk.com/public\" + data?.groupInfo?.groupId}>Page</a>\r\n                ]} />\r\n\r\n            <Row align=\"middle\" justify=\"center\" >\r\n                <Col flex=\"12\" md={12}>\r\n                    <ResponsiveContainer height={250}>\r\n                        <BarChart data={data?.stat?.statFloor?.map(t => t as object) ?? undefined}>\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <XAxis dataKey=\"floor\" />\r\n                            <YAxis dataKey=\"count\" />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <Bar dataKey=\"count\" fill=\"#fa541c\" />\r\n                        </BarChart>\r\n                    </ResponsiveContainer>\r\n                </Col>\r\n                <Col flex=\"12\" md={12}>\r\n                    <ResponsiveContainer height={250}>\r\n                        <AreaChart height={250} width={500} data={data?.stat?.statQuotes?.map(t => t as object) ?? undefined}>\r\n                            <XAxis dataKey=\"date\" />\r\n                            <CartesianGrid strokeDasharray=\"3 3\" />\r\n                            <YAxis dataKey=\"count\" />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <Area type=\"monotone\" dataKey=\"count\" fill=\"#722ed1\" />\r\n                        </AreaChart>\r\n                    </ResponsiveContainer>\r\n                </Col>\r\n            </Row>\r\n            <Row style={{ height: 200 }} gutter={60} align=\"stretch\" justify=\"center\">\r\n                <Col>\r\n                    <Statistic title=\"All users\" value={data?.stat?.statFloor?.reduce((prev, curr) => prev += curr?.count ?? 0, 0)} prefix={<UserOutlined />} />\r\n                </Col>\r\n                <Col >\r\n\r\n                </Col><Statistic title=\"All quotes\" value={data?.stat?.statQuotes?.reduce((prev, curr) => prev += curr?.count ?? 0, 0)} prefix={<CheckOutlined />} />\r\n            </Row>\r\n        </React.Fragment>\r\n\r\n\r\n    return <Row style={{ minHeight: \"100%\" }} align=\"middle\" justify=\"center\">\r\n        <Col span={6}>\r\n            <LoadingOutlined style={{ fontSize: 64 }} />\r\n        </Col>\r\n    </Row>\r\n}\r\n\r\nexport default Dash","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\serviceWorkerRegistration.ts",[],["191","192"],"C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Reports.tsx",["193","194","195","196"],"﻿import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { PageHeader, Space, Table } from \"antd\";\r\nimport { useQuery, gql } from \"@apollo/client\";\r\nimport { QueryType } from '../../generated/graphql'\r\nimport { ClosedTag, RepostTag } from \"../comps/DataTags\";\r\nimport { GET_REPORTS } from '../../generated/queries';\r\n\r\nexport const Reports: React.FC = () => {\r\n    const { data, loading } = useQuery<QueryType>(GET_REPORTS)\r\n\r\n    return <React.Fragment>\r\n        <PageHeader\r\n            ghost={true}\r\n            title=\"Reports\"\r\n            //subTitle={`Всего человек: ${state.pagination.showTotal}`}\r\n            extra={[\r\n\r\n            ]}>\r\n            <Table rowKey=\"id\" dataSource={data?.reports?.nodes ?? new Array()}\r\n                loading={loading}\r\n                pagination={{ showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} posts` }}>\r\n                <Table.Column key=\"id\" title=\"Id\" dataIndex=\"id\" sorter={(a: any, b: any) => a.id - b.id} />\r\n                <Table.Column key=\"name\" title=\"Name\" dataIndex=\"name\" sorter={(a: any, b: any) => a.text.localeCompare(b.text)}\r\n                    render={(item, record) => (<p><ClosedTag closed={record.closed} /> {record.name}</p>)}/>\r\n                <Table.Column key=\"max\" title=\"Max\" dataIndex=\"max\" sorter={(a: any, b: any) => a.max - b.max} />\r\n                <Table.Column\r\n                    width={42}\r\n                    title=\"Action\"\r\n                    key=\"action\"\r\n                    render={(record) => (\r\n                        <Space size=\"middle\">\r\n                            {!record.closed && <Link to={\"/panel/post/\" + record.fromPost.id}>Post</Link>}\r\n                            <Link to={\"/panel/report/\" + record.id}>View</Link>\r\n                        </Space>\r\n                    )}\r\n                />\r\n            </Table>\r\n        </PageHeader>\r\n    </React.Fragment>\r\n\r\n}\r\n\r\nexport default Reports","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Settings.tsx",["197"],"import { LoadingOutlined } from \"@ant-design/icons\";\r\nimport { gql, useMutation, useQuery } from \"@apollo/client\"\r\nimport { Button, Col, Form, Input, message, PageHeader, Row, Switch } from \"antd\"\r\nimport React, { useState } from \"react\"\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { MutationType, MutationTypeUpdateGroupArgs, QueryType, QueryTypeGroupInfoArgs } from \"../../generated/graphql\";\r\nimport { UPDATE_GROUP } from \"../../generated/mutations\";\r\nimport { GET_GROUP_INFO } from \"../../generated/queries\";\r\n\r\n\r\n\r\nconst successMes = () => {\r\n    message.success('Success');\r\n};\r\n\r\nconst errorMes = () => {\r\n    message.error('Error');\r\n};\r\n\r\ninterface RouterProps { // type for `match.params`\r\n    id: string; // must be type `string` since value comes from the URL\r\n}\r\n\r\ninterface GroupProps extends RouteComponentProps<RouterProps> {\r\n    all?: boolean\r\n    newGroup?: boolean\r\n}\r\n\r\n\r\nconst Settings: React.FC<GroupProps> = ({ match, history, all, newGroup }) => {\r\n    const id: number | undefined = all ? parseInt(match.params.id) : undefined\r\n\r\n    const [state, setState] = useState<{ withFilter: boolean }>({ withFilter:false })\r\n\r\n    const { data, loading, refetch } = useQuery<QueryType, QueryTypeGroupInfoArgs>(GET_GROUP_INFO, {\r\n        variables: {\r\n            forAdmin: all,\r\n            id: id,\r\n            newGroup\r\n        },\r\n        onCompleted: (dat) => setState({ ...state, withFilter: dat?.groupInfo?.withFilter ?? false })\r\n    })\r\n\r\n    const [update] = useMutation<MutationType, MutationTypeUpdateGroupArgs>(UPDATE_GROUP, {\r\n        onCompleted: (value) => {\r\n            if (value?.updateGroup)\r\n                successMes()\r\n            else\r\n                errorMes()\r\n            if (newGroup)\r\n                history.goBack();\r\n            else\r\n            refetch?.()\r\n        },\r\n        onError: () => errorMes(),\r\n        refetchQueries: [\"GetGroups\"]\r\n    })\r\n\r\n    if (!loading)\r\n        return <React.Fragment>\r\n            <PageHeader\r\n                ghost={false}\r\n                title={data?.groupInfo?.name}\r\n                onBack={all ? (() => window.history.back()) : undefined}\r\n                subTitle={`ID: ${data?.groupInfo?.groupId}`}\r\n            //extra={<a key=\"vkLink\" target=\"_blank\" rel=\"noopener noreferrer\" href={\"https://vk.com/public\" + data?.groupInfo?.groupId}>Page</a>} \r\n            />\r\n            <Row style={{ minHeight: \"100%\" }} align=\"middle\" justify=\"center\">\r\n                <Col span={8}>\r\n                    <Form onFinish={values => {\r\n                        update({\r\n                            variables: {\r\n                                inputGroup: {\r\n                                    enabled: values.enabled,\r\n                                    name: values.name,\r\n                                    token: values.token,\r\n                                    key: values.key,\r\n                                    secret: values.secret ? values.secret : \"\",\r\n                                    keyboard: values.keyboard,\r\n                                    withFilter: values.withFilter,\r\n                                    withQrCode: values.withQrCode,\r\n                                    buildNumber: values.buildNumber,\r\n                                    filterPattern: values.filterPattern,\r\n                                    groupId: values.groupId ? parseInt(values.groupId) : undefined\r\n                                },\r\n                                id,\r\n                                forAdmin: all,\r\n                                newGroup\r\n                            }\r\n                        })\r\n                    }}>\r\n                        <Form.Item label=\"Name\" name=\"name\">\r\n                            <Input placeholder=\"Name\" required defaultValue={data?.groupInfo?.name ?? undefined} />\r\n                        </Form.Item>\r\n                        {newGroup && <Form.Item label=\"GroupId\" name=\"groupId\">\r\n                            <Input placeholder=\"GroupId\" required/>\r\n                        </Form.Item>}\r\n                        <Form.Item label=\"Building\" name=\"buildNumber\">\r\n                            <Input placeholder=\"Building\" required defaultValue={data?.groupInfo?.buildNumber ?? undefined} />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"Token\" name=\"token\">\r\n                            <Input placeholder=\"Token\" type=\"text\" required defaultValue={data?.groupInfo?.token ?? undefined} />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"Key\" name=\"key\">\r\n                            <Input placeholder=\"Key\" required defaultValue={data?.groupInfo?.key ?? undefined} />\r\n                        </Form.Item>\r\n                        <Form.Item label=\"Secret\" name=\"secret\">\r\n                            <Input placeholder=\"Secret\" defaultValue={data?.groupInfo?.secret ?? undefined} />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"enabled\" label=\"Enabled\" valuePropName=\"checked\">\r\n                            <Switch defaultChecked={data?.groupInfo?.enabled ?? false} />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"keyboard\" label=\"Enable Keyboard\" valuePropName=\"checked\">\r\n                            <Switch defaultChecked={data?.groupInfo?.keyboard ?? false} />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"withQrCode\" label=\"Enable Qr-Codes\" valuePropName=\"checked\">\r\n                            <Switch defaultChecked={data?.groupInfo?.withQrCode ?? false} />\r\n                        </Form.Item>\r\n                        <Form.Item name=\"withFilter\" label=\"Enable Filter\" valuePropName=\"checked\">\r\n                            <Switch onChange={(val) => setState({ ...state, withFilter: val })} defaultChecked={data?.groupInfo?.withFilter ?? false} />\r\n                        </Form.Item>\r\n                        <Form.Item hidden={!state.withFilter} name=\"filterPattern\" label=\"Filter Pattern\">\r\n                            <Input defaultValue={data?.groupInfo?.filterPattern ?? \"[��]�������\"} />\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            <Button type=\"primary\" htmlType=\"submit\">Save Changes</Button>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </Col>\r\n            </Row>\r\n        </React.Fragment>\r\n\r\n    return <Row style={{ minHeight: \"100%\" }} align=\"middle\" justify=\"center\">\r\n        <Col flex=\"center\">\r\n            <LoadingOutlined style={{ fontSize: 64 }} />\r\n        </Col>\r\n    </Row>\r\n}\r\n\r\nexport default Settings","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\QrReader.tsx",["198","199"],"﻿import { LoadingOutlined } from \"@ant-design/icons\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { message, Row, Col, List, Card, Switch } from \"antd\";\r\nimport Column from \"antd/lib/table/Column\";\r\nimport React, { CSSProperties, useState } from \"react\";\r\nimport { FC } from \"react\";\r\nimport QrReader from 'react-qr-scanner';\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { MutationType, MutationTypeConfirmQrCodeArgs } from \"../generated/graphql\";\r\nimport { CONFIRM_QR_CODE } from \"../generated/mutations\";\r\n\r\n\r\nconst key = \"QrReader\"\r\n\r\nconst mesloading = () => {\r\n    message.loading({ key, content: \"Loading...\" })\r\n};\r\nconst mesError = (content) => {\r\n    message.error({ key, content, duration: 2 })\r\n};\r\nconst mesSuccess = (content) => {\r\n    message.success({ key, content, duration: 2 })\r\n};\r\n\r\ninterface RouterProps { // type for `match.params`\r\n    reportId: string; // must be type `string` since value comes from the URL\r\n}\r\n\r\ninterface ReaderProps extends RouteComponentProps<RouterProps> {\r\n    // any other props (leave empty if none)\r\n}\r\nconst previewStyle: CSSProperties = {\r\n    height: 240,\r\n    maxWidth: 500\r\n}\r\n\r\ntype User = {\r\n    id: number,\r\n    name: string,\r\n    room: number\r\n}\r\n\r\nconst QrReaderForm: FC<ReaderProps> = ({ match }) => {\r\n    const reportId = match.params.reportId\r\n\r\n    const [state, setState] = useState<{ scanned: string[], loading: boolean, users: User[], cam: \"front\"|\"rear\" }>({ scanned: [], loading: true, users: [], cam: \"rear\" })\r\n\r\n    const [confirm] = useMutation<MutationType, MutationTypeConfirmQrCodeArgs>(CONFIRM_QR_CODE, {\r\n        onCompleted: (data) => {\r\n            if (data.confirmQrCode) {\r\n                mesSuccess(`${data.confirmQrCode.name}(${data.confirmQrCode.room})`)\r\n                setState({\r\n                    ...state, users: [...state.users, {\r\n                        id: data?.confirmQrCode?.id,\r\n                        name: data?.confirmQrCode?.name ?? \"Oops\",\r\n                        room: data.confirmQrCode.room\r\n                    }]\r\n                })\r\n            }\r\n            else\r\n                mesError(\"Not recognized\");\r\n        },\r\n        onError: () => mesError(\"Not recognized\")\r\n    })\r\n\r\n\r\n    return (\r\n        <div style={{ height: \"100vh\", backgroundColor: \"#d9d9d9\" }}>\r\n            <Row align=\"middle\" justify=\"center\" style={{ minHeight: \"100%\" }}>\r\n                <Col>\r\n                    <Card title=\"Scanner\" bordered={false} extra={\r\n                        <Switch checkedChildren=\"Front\" unCheckedChildren=\"Rear\" onChange={\r\n                            (checked) =>\r\n                                setState({ ...state, cam: checked?\"front\":\"rear\" })} />\r\n                    }>\r\n                        <Row align=\"middle\" justify=\"center\">\r\n                            <Col>\r\n                                {state.loading && <LoadingOutlined style={{ fontSize: 64 }} />}\r\n                            </Col>\r\n                        </Row>\r\n                        <QrReader\r\n                            onScan={(data) => {\r\n                                if (data && !state.scanned.includes(data)) {\r\n                                    console.log(data)\r\n                                    setState({ ...state, scanned: [...state.scanned, data] })\r\n                                    confirm({ variables: { eReport: reportId, eReportItem: data } })\r\n                                    mesloading()\r\n                                }\r\n\r\n                            }}\r\n                            onLoad={() => setState({ ...state, loading: false })}\r\n                            facingMode={state.cam}\r\n                            onError={() => { }}\r\n                            style={previewStyle}\r\n                        />\r\n                        <List\r\n                            dataSource={state.users.reverse()}\r\n                            renderItem={item => (\r\n                                <List.Item key={item.id}>\r\n                                    <List.Item.Meta\r\n                                        title={item.name}\r\n                                        description={item.room}\r\n                                    />\r\n                                </List.Item>\r\n                            )}\r\n                        >\r\n                        </List>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QrReaderForm",["200","201"],"C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\admin\\GroupsTable.tsx",["202","203","204","205","206","207"],"import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { Button, Input, message, Modal, PageHeader, Space, Table, Tag } from \"antd\";\r\nimport { useQuery, gql, useLazyQuery, useMutation } from \"@apollo/client\";\r\nimport { QueryType, QueryTypeGroupsArgs, MutationTypeCreateFromTokenArgs, MutationType } from '../../../generated/graphql'\r\nimport { onError } from \"@apollo/client/link/error\";\r\nimport { GET_GROUPS_DETAILED } from \"../../../generated/queries\";\r\nimport { HANDLE_MASTER } from \"../../../generated/mutations\";\r\nimport { ClosedTag } from \"../../comps/DataTags\";\r\n\r\n\r\nexport const GroupsTable: React.FC = () => {\r\n    const [state, setState] = useState<{ masterDialog: boolean, token?: string, id?: string }>({ masterDialog: false });\r\n    const { data, loading } = useQuery<QueryType, QueryTypeGroupsArgs>(GET_GROUPS_DETAILED)\r\n    const history = useHistory()\r\n\r\n    const [handler, masterData] = useMutation<MutationType, MutationTypeCreateFromTokenArgs>(HANDLE_MASTER, {\r\n        onCompleted: (dat) => {\r\n            if (dat.createFromToken === 0)\r\n                message.error(\"Error\")\r\n            else {\r\n                message.success(\"Success\")\r\n                history.push(`/panel/admin/group/${dat.createFromToken}`)\r\n            }\r\n        },\r\n        onError: () => {\r\n            message.error(\"Error\")\r\n        }\r\n    })\r\n\r\n    const handleMaster = () => {\r\n        if (!state.token || !state.id || (state.token && state.token.length < 10) || (state.id && state.id.length < 1))\r\n            message.warn(\"Enter values\")\r\n        else {\r\n            handler({\r\n                variables: { token: state.token, groupName: state.id },\r\n            })\r\n            setState({ masterDialog: false })\r\n        }\r\n    }\r\n\r\n    return <React.Fragment>\r\n    <PageHeader\r\n      ghost={true}\r\n      title=\"Groups\"\r\n      //subTitle={`Всего человек: ${state.pagination.showTotal}`}\r\n            extra={[\r\n                <Button onClick={() => setState({ masterDialog: true })}>Add Master</Button>,\r\n                <Link to=\"/panel/admin/group/add\">Add Group</Link>\r\n            ]}>\r\n            <Table rowKey=\"id\" dataSource={data?.groups?.nodes ?? new Array()} //onChange={(pagination, filters, sorter) => {\r\n            //setState({...state, sorter, pagination})}} \r\n            loading={loading} \r\n            pagination={{showTotal : (total, range) => `${range[0]}-${range[1]} of ${total} posts`}}>\r\n                <Table.Column key=\"id\" title=\"Id\" dataIndex=\"id\" sorter={(a: any,b: any) => a.id - b.id}/>\r\n                <Table.Column key=\"name\" title=\"Name\" dataIndex=\"name\" sorter={(a: any, b: any) => a.text.localeCompare(b.text)} />\r\n                <Table.Column key=\"enabled\" dataIndex=\"enabled\" sorter={(a: any, b: any) => a.name?.localeCompare(b.name) ?? 1}\r\n                    render={(value) => <Tag color={value ? \"green\" : \"red\"}>{value ? \"Enabled\" : \"Disabled\"}</Tag>} />\r\n                <Table.Column key=\"buildNumber\" title=\"House\" dataIndex=\"buildNumber\" sorter={(a: any, b: any) => a.name?.localeCompare(b.name) ?? 1}/>\r\n                <Table.Column\r\n      width={36}\r\n      title=\"Action\"\r\n      key=\"action\"\r\n      render={(record) => (\r\n          <Space size=\"middle\">\r\n          <Link to={\"/panel/admin/group/\"+record.id}>View</Link>\r\n        </Space>\r\n      )}\r\n    />\r\n            </Table>\r\n        </PageHeader>\r\n\r\n        <Modal\r\n            visible={state.masterDialog}\r\n            title=\"Master\"\r\n            onOk={() => handleMaster()}\r\n            onCancel={() => {\r\n                setState({masterDialog: false})\r\n            }}\r\n            footer={[\r\n                <Button key=\"back\" onClick={() => {\r\n                    setState({ masterDialog: false })\r\n                }}>\r\n                    Return\r\n            </Button>,\r\n                <Button key=\"submit\" type=\"primary\" loading={loading} onClick={() => handleMaster()}>\r\n                    Submit\r\n            </Button>,\r\n            ]}\r\n        >\r\n            <p>Group name or id:</p>\r\n            <Input onChange={(e) => setState({ ...state, id: e.target.value })} />\r\n            <p>Token:</p>\r\n            <Input onChange={(e) => setState({ ...state, token: e.target.value })} />\r\n        </Modal>\r\n    </React.Fragment>\r\n\r\n}\r\n\r\nexport default GroupsTable",["208","209"],"C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\AuthLoading.tsx",["210"],"import { QueryTypeTokenArgs } from '../generated/graphql'\r\nimport React from 'react'\r\nimport { gql, useQuery } from '@apollo/client'\r\nimport { LoadingOutlined } from '@ant-design/icons'\r\nimport { Result, Button } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\nimport { GET_TOKEN } from '../generated/queries'\r\n\r\ntype AuthLoadingProps = {\r\n    callback: (response: string) => void\r\n    id: number,\r\n}\r\n\r\nexport const AuthLoading: React.FC<AuthLoadingProps> = ({ callback, id }) => {\r\n    const {data, loading, error} = useQuery<{token: string},QueryTypeTokenArgs>(GET_TOKEN, { variables: { groupId: id } })\r\n\r\n    if(!loading && data)\r\n    {\r\n        return <Result\r\n            status=\"success\"\r\n            title=\"Successfully Logged In\"\r\n            subTitle=\"Now you can enter to Panel\"\r\n            extra={\r\n                <Button type=\"primary\" key=\"console\" onClick={() => callback(data.token) }>\r\n                    Go to Panel\r\n                </Button>\r\n            }\r\n        />\r\n\r\n    }\r\n\r\n    if(!loading && error)\r\n    {\r\n        return <Result\r\n            status=\"error\"\r\n            title=\"Authorization Error\"\r\n            subTitle=\"Please, try again\"\r\n            extra={\r\n                <Link to=\"/home\">Back</Link>\r\n            }\r\n        />\r\n\r\n    }\r\n\r\n    return <LoadingOutlined style={{fontSize: 64}}/>\r\n}","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Report.tsx",["211","212","213","214","215","216","217","218","219","220"],"C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\comps\\DataTags.tsx",["221"],"﻿import { CSSProperties } from \"react\"\r\nimport { Tag } from \"antd\"\r\nimport React from \"react\"\r\n\r\n\r\nexport const RoleTag: React.FC<{ role: number, style?: CSSProperties }> = ({role, style}) => {\r\n    switch (role) {\r\n        case 0:\r\n            return (<Tag style={style} color=\"green\">User</Tag>)\r\n        case 1:\r\n            return (<Tag style={style} color=\"blue\">Moder</Tag>)\r\n        case 2:\r\n            return (<Tag style={style} color=\"red\">Admin</Tag>)\r\n        case 3:\r\n            return (<Tag style={style} color=\"blue\">MainModer</Tag>)\r\n        case 4:\r\n            return (<Tag style={style} color=\"red\">MainAdmin</Tag>)\r\n        default:\r\n            return <div></div>\r\n    }\r\n}\r\n\r\nexport const EnabledTag: React.FC<{ enable: boolean }> = ({ enable }) => {\r\n    return (<Tag color={enable ? \"green\" : \"red\"}>{enable?\"Enable\":\"Disable\"}</Tag>)\r\n}\r\n\r\nexport const OutTag: React.FC<{ isOut: boolean }> = ({ isOut }) => {\r\n    return (<Tag color={isOut ? \"red\" : \"green\"}>{isOut ? \"Out\" : \"In\"}</Tag>)\r\n}\r\n\r\nexport const RepostTag: React.FC = (props) => {\r\n    return <Tag color=\"warning\" {...props}>Repost</Tag>\r\n}\r\n\r\nexport const VerifiedTag: React.FC<{ verified: boolean }> = ({ verified }) => {\r\n    return (<Tag color={verified ? \"green\" : \"red\"}>{verified ? \"Verified\" : \"Not verified\"}</Tag>)\r\n}\r\n\r\nexport const ClosedTag: React.FC<{ closed: boolean }> = ({ closed }) => {\r\n    return (<Tag color={closed ? \"red\" : \"green\"}>{closed ? \"Closed\" : \"Open\"}</Tag>)\r\n}",["222","223"],"C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Users.tsx",["224","225","226","227","228"],"import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Input, List, PageHeader, Select, Space, Table } from \"antd\";\r\nimport { useQuery, gql } from \"@apollo/client\";\r\nimport { QueryType, QueryTypeUsersArgs, UserType } from '../../generated/graphql'\r\nimport { RoleTag } from \"../comps/DataTags\";\r\nimport UsersTableDesktop from \"../comps/desktop/UserTable\";\r\nimport UsersTableMobile from \"../comps/mobile/UserTable\";\r\nimport { GET_USERS, GET_USERS_ALL } from \"../../generated/queries\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const Users: React.FC<{ all?: boolean, isMobile?: boolean }> = ({ all, isMobile }) => {\r\n\r\n    const [state, setState] = useState<{\r\n        search?: string,\r\n        role: number\r\n        multipleSelect: UserType[]\r\n    }>({\r\n        search: \"\",\r\n        multipleSelect: [],\r\n        role: -1\r\n    })\r\n    const { data, loading } = useQuery<QueryType, QueryTypeUsersArgs>(all ? GET_USERS_ALL : GET_USERS, {\r\n        variables: {\r\n            forAdmin: all\r\n        }\r\n    })\r\n\r\n\r\n    return <React.Fragment>\r\n        <PageHeader\r\n            ghost={true}\r\n            title={!isMobile && \"Users\"}\r\n            //subTitle={`Всего человек: ${state.pagination.showTotal}`}\r\n            extra={[\r\n                <Input\r\n                key=\"search\"\r\n                    placeholder=\"Search\"\r\n                    onChange={e => {\r\n                        setState({ ...state, search: e.target.value })\r\n                    }}\r\n                    style={{ width: 200 }} />,\r\n                isMobile && <br/>,\r\n                !all && <Select key=\"radioRoles\" onSelect={(e) => setState({ ...state, role: e })} defaultValue={-1}>\r\n                    <Select.Option value={-1}>All</Select.Option>\r\n                    <Select.Option value={0}>User</Select.Option>\r\n                    <Select.Option value={1}>GroupModer</Select.Option>\r\n                    <Select.Option value={2}>GroupAdmin</Select.Option>\r\n                </Select>,\r\n                \r\n                <Link key=\"link\" to={all ? \"/panel/admin/users/multiple\" : \"/panel/users/multiple\"}>Multiple Actions</Link>\r\n            ]}\r\n        >\r\n            {isMobile?\r\n              <UsersTableMobile all={all} search={state.search} data={data} loading={loading} role={state.role}/>\r\n            :<UsersTableDesktop all={all} search={state.search} data={data} loading={loading} role={state.role}/>}\r\n        </PageHeader>\r\n    </React.Fragment>\r\n\r\n}\r\n\r\nexport default Users","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\panel\\Quote.js",["229","230","231","232","233","234"],"\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __generator = (this && this.__generator) || function (thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.SwitchVerification = exports.SwitchQuote = void 0;\r\nvar antd_1 = require(\"antd\");\r\nrequire(\"./User.sass\");\r\nvar mutations_1 = require(\"../../generated/mutations\");\r\nvar key = \"SwitchMes\";\r\nvar mesloading = function () {\r\n    antd_1.message.loading({ key: key, content: \"Loading...\" });\r\n};\r\nvar mesError = function () {\r\n    antd_1.message.error({ key: key, content: \"Error\", duration: 2 });\r\n};\r\nvar mesSuccess = function () {\r\n    antd_1.message.success({ key: key, content: \"Success\", duration: 2 });\r\n};\r\nfunction SwitchQuote(client, id, callback, all) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    mesloading();\r\n                    return [4 /*yield*/, client.mutate({ mutation: mutations_1.EDIT_QUOTE_TYPE, variables: { id: id, forAdmin: all } })\r\n                            .then(function (t) {\r\n                            var _a;\r\n                            if ((_a = t.data) === null || _a === void 0 ? void 0 : _a.switchQuoteVal) {\r\n                                mesSuccess();\r\n                                callback();\r\n                            }\r\n                            else\r\n                                mesError();\r\n                        }).catch(function () { return mesError(); })];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.SwitchQuote = SwitchQuote;\r\nfunction SwitchVerification(client, id, callback, all) {\r\n    return __awaiter(this, void 0, void 0, function () {\r\n        return __generator(this, function (_a) {\r\n            switch (_a.label) {\r\n                case 0:\r\n                    mesloading();\r\n                    return [4 /*yield*/, client.mutate({ mutation: mutations_1.EDIT_VERIFICATION_TYPE, variables: { id: id, forAdmin: all } })\r\n                            .then(function (t) {\r\n                            var _a;\r\n                            if ((_a = t.data) === null || _a === void 0 ? void 0 : _a.switchVerificationVal) {\r\n                                mesSuccess();\r\n                                callback();\r\n                            }\r\n                            else\r\n                                mesError();\r\n                        }).catch(function () { return mesError(); })];\r\n                case 1:\r\n                    _a.sent();\r\n                    return [2 /*return*/];\r\n            }\r\n        });\r\n    });\r\n}\r\nexports.SwitchVerification = SwitchVerification;\r\n//# sourceMappingURL=Quote.js.map",["235","236"],"C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\userpanel\\panel.tsx",["237","238"],"﻿import React, { FC } from 'react';\r\nimport { Layout, Menu } from 'antd';\r\nimport { Switch, Redirect, Route } from 'react-router-dom';\r\n\r\nconst { Header, Content, Footer } = Layout;\r\n\r\nconst UserPanel: FC = (props) => {\r\n\r\n    return (\r\n        <Layout style={{ minHeight: \"100vh\" }}>\r\n            <Header>\r\n                \r\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                    <Menu.Item key=\"1\">In query</Menu.Item>\r\n                    <Menu.Item key=\"2\">Meetups</Menu.Item>\r\n                    <Menu.Item key=\"3\">Completed</Menu.Item>\r\n                </Menu>\r\n            </Header>\r\n            <Layout style={{ padding: '36px' }} >\r\n                <Content\r\n                    className=\"site-layout-background\"\r\n                    style={{\r\n                        padding: 24,\r\n                        margin: 0,\r\n                        minHeight: 280,\r\n                    }}>\r\n                    <Switch>\r\n                        <Redirect from=\"/user/\" to=\"/user/query\"/>\r\n                    </Switch>\r\n                </Content>\r\n                </Layout>\r\n            <Footer style={{ textAlign: 'center' }}>help@nexagon.ru    QuoteSystem 2020 </Footer>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default UserPanel","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\generated\\queries.ts",["239"],"﻿import { gql } from \"@apollo/client\";\r\n\r\nexport const GET_PROFILE = gql`\r\nquery GetProfile\r\n{\r\n  profile{\r\n    id\r\n    name\r\n    role\r\n  }\r\n}\r\n`;\r\n\r\nexport const GET_GROUPS_AUTH = gql`\r\n    query authGroups($code: String!, $redirectUri: String!){\r\n        authGroups(code: $code, redirectUri: $redirectUri){\r\n        token\r\n        groups{\r\n            id\r\n            name\r\n            role\r\n        }\r\n    }\r\n}`;\r\n\r\nexport const GET_TOKEN = gql`\r\n    query GetToken($groupId: Long!){\r\n        token(groupId: $groupId)\r\n}`;\r\n\r\nexport const GET_USERS = gql`\r\nquery GetUsers($forAdmin: Boolean) {\r\n  users(forAdmin: $forAdmin) {\r\n    nodes {\r\n      id\r\n      name\r\n      role\r\n      room\r\n      buildNumber\r\n    }\r\n    totalCount\r\n  }\r\n}`;\r\n\r\nexport const GET_USERS_ALL = gql`\r\nquery GetUsers {\r\n  users(forAdmin : true) {\r\n    nodes {\r\n      id\r\n      name\r\n      room\r\n      buildNumber\r\n      group{\r\n        id\r\n        name\r\n      }\r\n    }\r\n    totalCount\r\n    pageInfo {\r\n      endCursor\r\n    }\r\n  }\r\n}`;\r\n\r\nexport const GET_USER = gql`\r\nquery GetUser($id: Int!, $forAdmin: Boolean) {\r\n    user(id: $id, forAdmin: $forAdmin) {\r\n        id\r\n        name\r\n        room\r\n        role\r\n        vkId\r\n    }\r\n    qoutesByUser(id: $id, forAdmin: $forAdmin) {\r\n        nodes {\r\n            id\r\n            isOut\r\n            post {\r\n                text,\r\n                max\r\n                id\r\n            }\r\n        }\r\n    } \r\n}`;\r\n\r\nexport const GET_GROUPS = gql`\r\nquery GetPosts{\r\n    groups {\r\n        nodes {\r\n            id\r\n            name\r\n            buildNumber\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\nexport const GET_ROLES = gql`\r\nquery GetRoles($id: Int!) {\r\n  userRoles(id: $id) {\r\n      id\r\n      buildNumber\r\n      role\r\n  }\r\n}\r\n`;\r\n\r\nexport const GET_GROUPS_DETAILED = gql`\r\nquery GetGroups{\r\n  groups {\r\n    nodes {\r\n      id\r\n      groupId\r\n      name\r\n      enabled\r\n      buildNumber\r\n    }\r\n  }\r\n}`;\r\n\r\nexport const GET_GROUP_INFO = gql`\r\nquery GetGroupInfo($id : Int, $forAdmin: Boolean, $newGroup: Boolean) {\r\n  groupInfo(id: $id, forAdmin: $forAdmin, newGroup: $newGroup) {\r\n    name\r\n    enabled\r\n    keyboard\r\n    groupId\r\n    key\r\n    secret\r\n    token\r\n    withFilter\r\n    filterPattern\r\n    buildNumber\r\n    withQrCode\r\n  }\r\n}\r\n`;\r\n\r\nexport const GET_POSTS_DETAILED = gql`\r\nquery GetPosts{\r\n    posts {\r\n        nodes {\r\n            text\r\n            id\r\n            max\r\n            deleted\r\n            isRepost\r\n        }\r\n    }\r\n}`;\r\n\r\nexport const GET_POSTS = gql`\r\nquery GetPosts{\r\n    posts {\r\n        nodes {\r\n            text\r\n            id\r\n            isRepost\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\nexport const GET_POST = gql`\r\nquery GetPost($id: Int!) {\r\n  post(id: $id) {\r\n    id\r\n    max\r\n    text\r\n    isRepost\r\n  }\r\n  qoutesByPost(id: $id) {\r\n    nodes {\r\n      id\r\n      isOut\r\n      user {\r\n        name\r\n        room\r\n        id\r\n      }\r\n    }\r\n    totalCount\r\n  }\r\n}\r\n`;\r\n\r\nexport const GET_DASHBOARD_INFO = gql`\r\nquery GetGroupInfo {\r\n  groupInfo {\r\n    name\r\n    enabled\r\n    groupId\r\n  }\r\n  stat{\r\n    statFloor{\r\n      floor\r\n      count\r\n      }\r\n    statQuotes{\r\n      date\r\n      count\r\n      }\r\n  }\r\n}\r\n`;\r\n\r\nexport const GET_DASHBOARD_INFO_ALL = gql`\r\nquery GetGroupsInfo($groupId: Int) {\r\n    groupInfo(id: $groupId) {\r\n        id\r\n        name\r\n        enabled\r\n        groupId\r\n      }\r\n      stat(forAdmin: true, groupId: $groupId){\r\n        statFloor{\r\n          floor\r\n          count\r\n          }\r\n        statQuotes{\r\n          date\r\n          count\r\n          }\r\n      }\r\n  groups {\r\n    nodes {\r\n      id\r\n      buildNumber\r\n    }\r\n  }\r\n}`;\r\n\r\nexport const GET_REPORTS = gql`\r\nquery GetReports{\r\n    reports {\r\n        nodes {\r\n            id\r\n            max\r\n            name\r\n            closed\r\n            fromPost {\r\n                id\r\n            }\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\nexport const GET_REPORT = gql`\r\nquery GetReport($id: Int!) {\r\n    report(id: $id) {\r\n        id\r\n        max\r\n        closed\r\n        name\r\n        fromPost {\r\n            id\r\n        }\r\n    }\r\n    reportItems(id: $id){\r\n        nodes{\r\n            id\r\n            verified\r\n            user{\r\n                name\r\n                id\r\n                room\r\n            }\r\n        }\r\n        totalCount\r\n    }\r\n}`;\r\n\r\nexport const GET_REPORT_CODE = gql`\r\nquery GetReportCode($id: Int!) {\r\n    reportCode(id: $id)\r\n}\r\n`;\r\n\r\nexport const USER_GET_QUERIES = gql`\r\nquery GetUserInfo{\r\n    userInfo{\r\n        quotes{\r\n            id\r\n            post{\r\n                text\r\n                max\r\n            }\r\n        }\r\n        reportItems{\r\n            id\r\n            fromPost{\r\n                text\r\n                max\r\n            }\r\n            closed\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\nexport const GET_LIFETIME_TOKEN = gql`\r\nquery GetPost {\r\n    lifetimeToken\r\n}`;","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\userpanel\\Queries.tsx",["240","241","242","243"],"﻿import { useQuery } from '@apollo/client';\r\nimport { Col, List, Row, Table } from 'antd';\r\nimport React, { FC } from 'react';\r\nimport { QueryType } from '../../generated/graphql';\r\nimport { USER_GET_QUERIES } from '../../generated/queries';\r\nimport { OutTag } from '../comps/DataTags';\r\n\r\n\r\nconst Queries: FC = () => {\r\n    console.log(\"Queries\")\r\n    const { loading, data } = useQuery<QueryType>(USER_GET_QUERIES)\r\n\r\n    return (\r\n        <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n            <Col span={8}>\r\n                <h2>Application for participation:</h2>\r\n                <List\r\n                    itemLayout=\"horizontal\"\r\n                    dataSource={data?.userInfo?.quotes ?? []}\r\n                    renderItem={item => (\r\n                        <List.Item key={item?.id}>\r\n                            <List.Item.Meta\r\n                                title={item?.post?.text}\r\n                            />\r\n                        </List.Item>\r\n                    )}\r\n                />\r\n            </Col>\r\n            <Col span={8} >\r\n                <h2>Participation:</h2>\r\n                <List\r\n                    itemLayout=\"horizontal\"\r\n                    dataSource={data?.userInfo?.reportItems?.filter((t) => !t?.closed ?? false) ?? []}\r\n                    renderItem={item => (\r\n                        <List.Item key={item?.id}>\r\n                            <List.Item.Meta\r\n                                title={item?.fromPost?.text}\r\n                            />\r\n                        </List.Item>\r\n                    )}\r\n                />\r\n            </Col>\r\n            <Col span={8} >\r\n                <h2>Past:</h2>\r\n                <List\r\n                    itemLayout=\"horizontal\"\r\n                    dataSource={data?.userInfo?.reportItems?.filter((t) => t?.closed ?? false) ?? []}\r\n                    renderItem={item => (\r\n                        <List.Item key={item?.id}>\r\n                            <List.Item.Meta\r\n                                title={item?.fromPost?.text}\r\n                            />\r\n                        </List.Item>\r\n                    )}\r\n                />\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Queries;","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\userpanel\\Panel.tsx",["244"],"﻿import React, { FC } from 'react';\r\nimport { Layout, Menu } from 'antd';\r\nimport { Switch, Redirect, Route, useHistory } from 'react-router-dom';\r\nimport Queries from './Queries';\r\n\r\nconst { Header, Content, Footer } = Layout;\r\n\r\ntype ItemType = {\r\n    path: string,\r\n    key: string,\r\n}\r\n\r\nconst ContentItems: ItemType[] = [\r\n    {\r\n        path: \"/user/queries\",\r\n        key: \"queries\"\r\n    },\r\n    {\r\n        path: \"/user/reports\",\r\n        key: \"reports\"\r\n    },\r\n    {\r\n        path: \"/user/verified\",\r\n        key: \"verified\"\r\n    },\r\n]\r\n\r\nconst UserPanel: FC = (props) => {\r\n\r\n    const history = useHistory();\r\n\r\n    return (\r\n        <Layout style={{ minHeight: \"100vh\" }}>\r\n            <Header>\r\n                \r\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']} onClick={({ key }) => {\r\n                    history.push(ContentItems.find(t => t.key === key)?.path ?? \"\")\r\n                }}>\r\n                    <Menu.Item key=\"queries\">In query</Menu.Item>\r\n                    <Menu.Item key=\"reports\">Meetups</Menu.Item>\r\n                    <Menu.Item key=\"verified\">Completed</Menu.Item>\r\n                </Menu>\r\n            </Header>\r\n            <Layout style={{ padding: '36px' }} >\r\n                <Content\r\n                    className=\"site-layout-background\"\r\n                    style={{\r\n                        padding: 24,\r\n                        margin: 0,\r\n                        minHeight: 280,\r\n                    }}>\r\n                    <Switch>\r\n                        <Redirect exact from=\"/user/\" to=\"/user/queries\" />\r\n\r\n                        <Route path=\"/user/queries\" component={() => <Queries/>} />\r\n                        <Route path=\"/user/reports\" component={() => <Queries />} />\r\n                        <Route path=\"/user/verified\" component={() => <Queries />} />\r\n                    </Switch>\r\n                </Content>\r\n                </Layout>\r\n            <Footer style={{ textAlign: 'center' }}>help@nexagon.ru    QuoteSystem 2020 </Footer>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default UserPanel","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\components\\Login.tsx",["245"],"import { GroupResponseType, QueryType, QueryTypeAuthGroupsArgs } from '../generated/graphql'\r\nimport { GET_GROUPS_AUTH } from '../generated/queries'\r\nimport React from 'react'\r\nimport { gql, useQuery } from '@apollo/client'\r\nimport { LoadingOutlined, CheckCircleOutlined } from '@ant-design/icons'\r\nimport { Result } from 'antd'\r\nimport { Link } from 'react-router-dom'\r\n\r\ntype LoginProps = {\r\n    callback: (response: GroupResponseType) => void\r\n    code: string,\r\n    redirectUri: string\r\n}\r\n\r\n\r\n\r\nexport const Login: React.FC<LoginProps> = ({ callback, code, redirectUri }) => {\r\n    const { data, loading, error } = useQuery<QueryType, QueryTypeAuthGroupsArgs>(GET_GROUPS_AUTH, { variables: { code: code, redirectUri: redirectUri } })\r\n    if (!loading && data?.authGroups)\r\n    {\r\n        callback(data.authGroups)\r\n    }\r\n\r\n    return (loading ? <LoadingOutlined style={{ fontSize: 64 }} /> : (error?\r\n        <Result\r\n            status=\"error\"\r\n            title=\"Authorization Error\"\r\n            subTitle=\"Please, try again\"\r\n            extra={\r\n                <Link to=\"/home\">Back</Link>\r\n            }\r\n        />\r\n        : <CheckCircleOutlined style = {{ fontSize: 64 }}/>))\r\n}\r\n\r\n","C:\\Users\\Artyom\\Documents\\source\\repos\\QuoteBot\\QuotePanel\\ClientApp\\src\\generated\\mutations.ts",["246"],{"ruleId":"247","replacedBy":"248"},{"ruleId":"249","replacedBy":"250"},{"ruleId":"251","severity":1,"message":"252","line":5,"column":20,"nodeType":"253","messageId":"254","endLine":5,"endColumn":23},{"ruleId":"251","severity":1,"message":"255","line":74,"column":24,"nodeType":"253","messageId":"254","endLine":74,"endColumn":34},{"ruleId":"256","severity":1,"message":"257","line":140,"column":61,"nodeType":"258","messageId":"259","endLine":140,"endColumn":72,"fix":"260"},{"ruleId":"256","severity":1,"message":"257","line":193,"column":89,"nodeType":"258","messageId":"259","endLine":193,"endColumn":100,"fix":"261"},{"ruleId":"251","severity":1,"message":"252","line":5,"column":20,"nodeType":"253","messageId":"254","endLine":5,"endColumn":23},{"ruleId":"256","severity":1,"message":"257","line":136,"column":69,"nodeType":"258","messageId":"259","endLine":136,"endColumn":80,"fix":"262"},{"ruleId":"256","severity":1,"message":"257","line":160,"column":109,"nodeType":"258","messageId":"259","endLine":160,"endColumn":120,"fix":"263"},{"ruleId":"256","severity":1,"message":"257","line":202,"column":66,"nodeType":"258","messageId":"259","endLine":202,"endColumn":77,"fix":"264"},{"ruleId":"247","replacedBy":"265"},{"ruleId":"249","replacedBy":"266"},{"ruleId":"247","replacedBy":"267"},{"ruleId":"249","replacedBy":"268"},{"ruleId":"251","severity":1,"message":"269","line":1,"column":17,"nodeType":"253","messageId":"254","endLine":1,"endColumn":26},{"ruleId":"251","severity":1,"message":"252","line":6,"column":10,"nodeType":"253","messageId":"254","endLine":6,"endColumn":13},{"ruleId":"251","severity":1,"message":"270","line":68,"column":13,"nodeType":"253","messageId":"254","endLine":68,"endColumn":20},{"ruleId":"271","severity":1,"message":"272","line":81,"column":49,"nodeType":"273","messageId":"274","endLine":81,"endColumn":51},{"ruleId":"251","severity":1,"message":"275","line":3,"column":59,"nodeType":"253","messageId":"254","endLine":3,"endColumn":70},{"ruleId":"247","replacedBy":"276"},{"ruleId":"249","replacedBy":"277"},{"ruleId":"278","severity":1,"message":"279","line":1,"column":1,"nodeType":"280","messageId":"274","fix":"281"},{"ruleId":"251","severity":1,"message":"252","line":4,"column":20,"nodeType":"253","messageId":"254","endLine":4,"endColumn":23},{"ruleId":"256","severity":1,"message":"257","line":21,"column":62,"nodeType":"258","messageId":"259","endLine":21,"endColumn":73,"fix":"282"},{"ruleId":"247","replacedBy":"283"},{"ruleId":"249","replacedBy":"284"},{"ruleId":"256","severity":1,"message":"257","line":17,"column":46,"nodeType":"258","messageId":"259","endLine":17,"endColumn":57,"fix":"285"},{"ruleId":"256","severity":1,"message":"257","line":165,"column":85,"nodeType":"258","messageId":"259","endLine":165,"endColumn":96,"fix":"286"},{"ruleId":"256","severity":1,"message":"257","line":223,"column":87,"nodeType":"258","messageId":"259","endLine":223,"endColumn":98,"fix":"287"},{"ruleId":"247","replacedBy":"288"},{"ruleId":"249","replacedBy":"289"},{"ruleId":"251","severity":1,"message":"252","line":1,"column":10,"nodeType":"253","messageId":"254","endLine":1,"endColumn":13},{"ruleId":"251","severity":1,"message":"290","line":2,"column":31,"nodeType":"253","messageId":"254","endLine":2,"endColumn":43},{"ruleId":"251","severity":1,"message":"291","line":1,"column":10,"nodeType":"253","messageId":"254","endLine":1,"endColumn":15},{"ruleId":"251","severity":1,"message":"292","line":5,"column":10,"nodeType":"253","messageId":"254","endLine":5,"endColumn":17},{"ruleId":"256","severity":1,"message":"257","line":19,"column":111,"nodeType":"258","messageId":"259","endLine":19,"endColumn":122,"fix":"293"},{"ruleId":"251","severity":1,"message":"252","line":2,"column":10,"nodeType":"253","messageId":"254","endLine":2,"endColumn":13},{"ruleId":"294","severity":1,"message":"295","line":13,"column":11,"nodeType":"296","messageId":"274","endLine":13,"endColumn":13},{"ruleId":"247","replacedBy":"297"},{"ruleId":"249","replacedBy":"298"},{"ruleId":"278","severity":1,"message":"279","line":1,"column":1,"nodeType":"280","messageId":"274","fix":"299"},{"ruleId":"251","severity":1,"message":"252","line":4,"column":20,"nodeType":"253","messageId":"254","endLine":4,"endColumn":23},{"ruleId":"251","severity":1,"message":"300","line":6,"column":21,"nodeType":"253","messageId":"254","endLine":6,"endColumn":30},{"ruleId":"256","severity":1,"message":"257","line":20,"column":68,"nodeType":"258","messageId":"259","endLine":20,"endColumn":79,"fix":"301"},{"ruleId":"251","severity":1,"message":"252","line":2,"column":10,"nodeType":"253","messageId":"254","endLine":2,"endColumn":13},{"ruleId":"278","severity":1,"message":"279","line":1,"column":1,"nodeType":"280","messageId":"274","fix":"302"},{"ruleId":"251","severity":1,"message":"303","line":4,"column":8,"nodeType":"253","messageId":"254","endLine":4,"endColumn":14},{"ruleId":"247","replacedBy":"304"},{"ruleId":"249","replacedBy":"305"},{"ruleId":"251","severity":1,"message":"252","line":4,"column":20,"nodeType":"253","messageId":"254","endLine":4,"endColumn":23},{"ruleId":"251","severity":1,"message":"306","line":4,"column":25,"nodeType":"253","messageId":"254","endLine":4,"endColumn":37},{"ruleId":"251","severity":1,"message":"307","line":6,"column":10,"nodeType":"253","messageId":"254","endLine":6,"endColumn":17},{"ruleId":"251","severity":1,"message":"308","line":9,"column":10,"nodeType":"253","messageId":"254","endLine":9,"endColumn":19},{"ruleId":"251","severity":1,"message":"309","line":17,"column":21,"nodeType":"253","messageId":"254","endLine":17,"endColumn":31},{"ruleId":"256","severity":1,"message":"257","line":51,"column":67,"nodeType":"258","messageId":"259","endLine":51,"endColumn":78,"fix":"310"},{"ruleId":"247","replacedBy":"311"},{"ruleId":"249","replacedBy":"312"},{"ruleId":"251","severity":1,"message":"252","line":3,"column":10,"nodeType":"253","messageId":"254","endLine":3,"endColumn":13},{"ruleId":"278","severity":1,"message":"279","line":1,"column":1,"nodeType":"280","messageId":"274","fix":"313"},{"ruleId":"251","severity":1,"message":"314","line":1,"column":17,"nodeType":"253","messageId":"254","endLine":1,"endColumn":26},{"ruleId":"251","severity":1,"message":"252","line":5,"column":20,"nodeType":"253","messageId":"254","endLine":5,"endColumn":23},{"ruleId":"251","severity":1,"message":"315","line":9,"column":21,"nodeType":"253","messageId":"254","endLine":9,"endColumn":27},{"ruleId":"251","severity":1,"message":"300","line":9,"column":29,"nodeType":"253","messageId":"254","endLine":9,"endColumn":38},{"ruleId":"251","severity":1,"message":"316","line":10,"column":10,"nodeType":"253","messageId":"254","endLine":10,"endColumn":18},{"ruleId":"251","severity":1,"message":"317","line":11,"column":24,"nodeType":"253","messageId":"254","endLine":11,"endColumn":38},{"ruleId":"251","severity":1,"message":"318","line":11,"column":40,"nodeType":"253","messageId":"254","endLine":11,"endColumn":52},{"ruleId":"251","severity":1,"message":"319","line":26,"column":7,"nodeType":"253","messageId":"254","endLine":26,"endColumn":14},{"ruleId":"256","severity":1,"message":"257","line":157,"column":60,"nodeType":"258","messageId":"259","endLine":157,"endColumn":71,"fix":"320"},{"ruleId":"278","severity":1,"message":"279","line":1,"column":1,"nodeType":"280","messageId":"274","fix":"321"},{"ruleId":"247","replacedBy":"322"},{"ruleId":"249","replacedBy":"323"},{"ruleId":"251","severity":1,"message":"324","line":3,"column":17,"nodeType":"253","messageId":"254","endLine":3,"endColumn":21},{"ruleId":"251","severity":1,"message":"291","line":3,"column":43,"nodeType":"253","messageId":"254","endLine":3,"endColumn":48},{"ruleId":"251","severity":1,"message":"325","line":3,"column":50,"nodeType":"253","messageId":"254","endLine":3,"endColumn":55},{"ruleId":"251","severity":1,"message":"252","line":4,"column":20,"nodeType":"253","messageId":"254","endLine":4,"endColumn":23},{"ruleId":"251","severity":1,"message":"292","line":6,"column":10,"nodeType":"253","messageId":"254","endLine":6,"endColumn":17},{"ruleId":"326","severity":1,"message":"327","line":1,"column":1,"nodeType":"328","messageId":"329","endLine":1,"endColumn":14,"fix":"330"},{"ruleId":"331","severity":1,"message":"332","line":13,"column":70,"nodeType":"333","messageId":"334","endLine":13,"endColumn":71},{"ruleId":"331","severity":1,"message":"332","line":18,"column":22,"nodeType":"333","messageId":"334","endLine":18,"endColumn":23},{"ruleId":"331","severity":1,"message":"332","line":19,"column":22,"nodeType":"333","messageId":"334","endLine":19,"endColumn":23},{"ruleId":"335","severity":1,"message":"336","line":56,"column":13,"nodeType":"337","messageId":"338","endLine":72,"endColumn":14},{"ruleId":"335","severity":1,"message":"336","line":80,"column":13,"nodeType":"337","messageId":"338","endLine":96,"endColumn":14},{"ruleId":"247","replacedBy":"265"},{"ruleId":"249","replacedBy":"266"},{"ruleId":"278","severity":1,"message":"279","line":1,"column":1,"nodeType":"280","messageId":"274","fix":"339"},{"ruleId":"251","severity":1,"message":"340","line":3,"column":28,"nodeType":"253","messageId":"254","endLine":3,"endColumn":33},{"ruleId":"278","severity":1,"message":"279","line":1,"column":1,"nodeType":"280","messageId":"274","fix":"341"},{"ruleId":"278","severity":1,"message":"279","line":1,"column":1,"nodeType":"280","messageId":"274","fix":"342"},{"ruleId":"251","severity":1,"message":"325","line":2,"column":26,"nodeType":"253","messageId":"254","endLine":2,"endColumn":31},{"ruleId":"251","severity":1,"message":"315","line":6,"column":10,"nodeType":"253","messageId":"254","endLine":6,"endColumn":16},{"ruleId":"251","severity":1,"message":"270","line":11,"column":13,"nodeType":"253","messageId":"254","endLine":11,"endColumn":20},{"ruleId":"278","severity":1,"message":"279","line":1,"column":1,"nodeType":"280","messageId":"274","fix":"343"},{"ruleId":"251","severity":1,"message":"252","line":4,"column":10,"nodeType":"253","messageId":"254","endLine":4,"endColumn":13},{"ruleId":"278","severity":1,"message":"279","line":1,"column":1,"nodeType":"280","messageId":"274","fix":"344"},"no-native-reassign",["345"],"no-negated-in-lhs",["346"],"@typescript-eslint/no-unused-vars","'gql' is defined but never used.","Identifier","unusedVar","'deleteData' is assigned a value but never used.","@typescript-eslint/no-array-constructor","The array literal notation [] is preferable.","NewExpression","useLiteral",{"range":"347","text":"348"},{"range":"349","text":"348"},{"range":"350","text":"348"},{"range":"351","text":"348"},{"range":"352","text":"348"},["345"],["346"],["345"],["346"],"'useEffect' is defined but never used.","'loading' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'CheckSwitch' is defined but never used.",["345"],["346"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program",{"range":"353","text":"354"},{"range":"355","text":"348"},["345"],["346"],{"range":"356","text":"348"},{"range":"357","text":"348"},{"range":"358","text":"348"},["345"],["346"],"'DocumentNode' is defined but never used.","'Space' is defined but never used.","'RoleTag' is defined but never used.",{"range":"359","text":"348"},"no-empty-pattern","Unexpected empty array pattern.","ArrayPattern",["345"],["346"],{"range":"360","text":"354"},"'RepostTag' is defined but never used.",{"range":"361","text":"348"},{"range":"362","text":"354"},"'Column' is defined but never used.",["345"],["346"],"'useLazyQuery' is defined but never used.","'onError' is defined but never used.","'ClosedTag' is defined but never used.","'masterData' is assigned a value but never used.",{"range":"363","text":"348"},["345"],["346"],{"range":"364","text":"354"},"'ReactText' is defined but never used.","'OutTag' is defined but never used.","'GET_POST' is defined but never used.","'EDIT_POST_INFO' is defined but never used.","'NOTIFY_USERS' is defined but never used.","'isEmpty' is assigned a value but never used.",{"range":"365","text":"348"},{"range":"366","text":"354"},["345"],["346"],"'List' is defined but never used.","'Table' is defined but never used.","strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"367","text":"354"},"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",{"range":"368","text":"354"},"'Route' is defined but never used.",{"range":"369","text":"354"},{"range":"370","text":"354"},{"range":"371","text":"354"},{"range":"372","text":"354"},"no-global-assign","no-unsafe-negation",[5440,5451],"[]",[8101,8112],[5390,5401],[6979,6990],[9179,9190],[-1,0],"",[768,779],[498,509],[5825,5836],[8135,8146],[730,741],[-1,0],[733,744],[-1,0],[2210,2221],[-1,0],[6862,6873],[-1,0],[0,13],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]